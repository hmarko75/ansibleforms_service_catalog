---
- name: create dr or b2d volume  
  hosts: "localhost"
  become: no 
  gather_facts: no
  vars:
    cluster: "{{ vars[copy].cluster }}"
    aggregate: "{{ vars[copy].aggregate }}"
    svm: "{{ vars[copy].svm }}"
    volname: "{{ vars[copy].volname }}"
    volsize: "{{ vars[copy].volsize }}"
    
    #get snapmirror configuration for the volume 
    snapmirrorpolicy: "{{ vars[copy]['source'].policy }}"
    snapmirrorschedule: "{{ vars[copy]['source'].schedule }}"
    snapmirrordynamicschedule: "{{ vars[copy]['source'].dynamicschedule }}"
    
    #get snapmirror source configuration for the volume 
    source: "{{ vars[copy]['source']['copy'] }}"
    sourcecluster: "{{ vars[source]['cluster'] }}"
    sourcesvm: "{{ vars[source]['svm'] }}"
    sourcevolname: "{{ vars[source]['volname'] }}"
    
    clusterauth:  &login
      hostname: "{{ cluster }}"
      username: "{{ login.user }}"
      password: "{{ login.password }}"
      https: true
      validate_certs: false
  vars_files:
  #- volume_variables.yaml      
  - ../globals.yaml
  collections:
  - netapp.ontap  
  tasks:
    #add suffix to scheule name  with offset from the prod snapshot 
    - name: dynamic snapmirror
      no_log: True
      when: 
        snapmirrordynamicschedule == true and snapmirrorschedule not in ['none','']
      set_fact:
        snapmirror_schedule_suffix: "{{ (base_schedule_suffix|int + VolumeDefaults.dynamic.replication_schedule_offset[copy] |int)}}"

    #when suffix is < 1 rotate 
    - name: dynamic snapmirror1
      no_log: True
      when: 
        snapmirror_schedule_suffix is defined and snapmirror_schedule_suffix|int < 1
      set_fact:
        snapmirror_schedule_suffix: "{{ VolumeDefaults.dynamic.total_schedules|int + snapmirror_schedule_suffix|int }}"
    
    # when suffix is > from VolumeDefaults.dynamic.total_schedules
    - name: dynamic snapmirror2
      no_log: True
      when: 
        snapmirror_schedule_suffix is defined  and snapmirror_schedule_suffix|int > VolumeDefaults.dynamic.total_schedules
      set_fact:
        snapmirror_schedule_suffix: "{{ snapmirror_schedule_suffix|int - VolumeDefaults.dynamic.total_schedules|int }}"

    # display log 
    - name: vol creation info
      ansible.builtin.debug:
        msg:
        - "creating dr/b2d volume: {{ cluster }}:{{ svm }}:{{ volname }} size:{{ volsize }}GB copy:{{ copy }} source: {{ sourcecluster+':'+source }}"

    # create dp volume 
    - name: create dr/b2d volume
      na_ontap_volume:
        state: present
        aggregate_name: "{{ aggregate }}"
        name: "{{ volname }}"
        vserver: "{{ svm }}"
        size: "{{ volsize | int }}"
        type: DP
        comment: "{{ general.comment | default(omit) }}"
        <<: *login 

    # set dp volume autosize 
    - name: Modify volume autosize
      na_ontap_volume_autosize:
        vserver: "{{ svm }}"
        volume: "{{ volname }}"
        mode: "{{ VolumeDefaults.auto_size[copy].mode | default(omit) }}"
        grow_threshold_percent: "{{ VolumeDefaults.auto_size[copy].grow_threshold_percent | default(omit) }}"
        shrink_threshold_percent: "{{ VolumeDefaults.auto_size[copy].shrink_threshold_percent | default(omit) }}"
        maximum_size: "{{ ((VolumeDefaults.auto_size[copy].vol_max_size_ratio*(volsize|float))|int|string)+'g' | default(omit) }}"
        minimum_size: "{{ ((VolumeDefaults.auto_size[copy].vol_min_size_ratio*(volsize|float))|int|string)+'g' | default(omit) }}"
        <<: *login

    # create vserver peer 
    - name: Source vserver peer create
      netapp.ontap.na_ontap_vserver_peer:
        state: present
        peer_vserver: "{{ sourcesvm }}"
        peer_cluster: "{{ sourcecluster }}"
        vserver: "{{ svm }}"
        applications: ['snapmirror']   
        peer_options:
          hostname: "{{ sourcecluster }}"
        <<: *login
    
    # create snapmirror policy if details are provided
    - name: Create SnapMirror policy 
      na_ontap_snapmirror_policy:
        state: present
        vserver: "{{ svm }}"
        policy_name: "{{ snapmirrorpolicy.name }}"
        policy_type: "{{ snapmirrorpolicy.policy_type }}"
        snapmirror_label: "{{ snapmirrorpolicy.snapmirror_label }}"
        keep: "{{ snapmirrorpolicy.keep }}"
        <<: *login
      when: snapmirrorpolicy.keep is defined 

    # creates and initializes the snapmirror
    - name: Create SnapMirror and initialize 
      na_ontap_snapmirror:
        state: present
        source_endpoint:
          path: "{{ sourcesvm+':'+sourcevolname }}"
        destination_endpoint:
          path: "{{ svm+':'+volname }}"
        schedule: "{{ (snapmirrorschedule+snapmirror_schedule_suffix|string) if snapmirrordynamicschedule == true and snapmirrorschedule not in ['none','']  else snapmirrorschedule }}"
        policy: "{{ snapmirrorpolicy.name }}"
        initialize: True
        <<: *login       

- name: Rediscover cluster in AIQUM
  import_playbook: aiqum_rediscover_cluster.yaml
  vars:
    cluster: "{{ vars[copy].cluster | default (omit)}}"
    cluster_key: "{{ vars[copy].clusterkey | default (omit)}}"
  ignore_errors: yes