---
- name: create dr or b2d volume  
  hosts: "localhost"
  become: no 
  gather_facts: no
  vars:
    cluster: "{{ vars[copy].cluster }}"
    aggregate: "{{ vars[copy].aggregate }}"
    svm: "{{ vars[copy].svm }}"
    volname: "{{ vars[copy].volname }}"
    volsize: "{{ vars[copy].volsize }}"
    secstyle: "{{ vars.prod.secstyle }}"
    clusterauth:  &login
      hostname: "{{ cluster }}"
      username: "{{ login.user }}"
      password: "{{ login.password }}"
      https: true
      validate_certs: false
  vars_files:
  - volume_variables.yaml      
  collections:
  - netapp.ontap  
  tasks:

    - name: vol creation info
      ansible.builtin.debug:
        msg:
        - "creating dr/b2d volume: {{ cluster }}:{{ svm }}:{{ volname }} size:{{ volsize }}GB copy:{{ copy }}"

    - name: create dr/b2d volume
      na_ontap_volume:
        state: present
        aggregate_name: "{{ aggregate }}"
        name: "{{ volname }}"
        vserver: "{{ svm }}"
        size: "{{ volsize | int }}"
        type: DP
        comment: "{{ general.comment }}"
        <<: *login 

    - name: Modify volume autosize
      when: copy.startswith('b2d')
      na_ontap_volume_autosize:
        vserver: "{{ svm }}"
        volume: "{{ volname }}"
        mode: "{{ VolumeDefaults.auto_size_b2d.mode | default(omit) }}"
        grow_threshold_percent: "{{ VolumeDefaults.auto_size_b2d.grow_threshold_percent | default(omit) }}"
        shrink_threshold_percent: "{{ VolumeDefaults.auto_size_b2d.shrink_threshold_percent | default(omit) }}"
        maximum_size: "{{ ((VolumeDefaults.auto_size_b2d.vol_max_size_ratio*(volsize|float))|int|string)+'g' | default(omit) }}"
        minimum_size: "{{ ((VolumeDefaults.auto_size_b2d.vol_min_size_ratio*(volsize|float))|int|string)+'g' | default(omit) }}"
        <<: *login
      

      

        #size_unit: "{{  (UserInputs.size_unit | lower) if (UserInputs.size_unit is defined) else 'gb' }}"
        #auto_provision_as: "{{ UserInputs.auto_provision_as  | default(omit) }}"
        #snapshot_policy: "{{ UserInputs.nas_application_template.snapshot_policy  | default(omit) }}"
        #qos_policy_group: "{{ omit if( UserInputs.nas_application_template.qos.policy.name is not defined or  UserInputs.nas_application_template.qos.policy.name == 'extreme' or  UserInputs.nas_application_template.qos.policy.name == 'performance' or UserInputs.nas_application_template.qos.policy.name == 'value') else UserInputs.nas_application_template.qos.policy.name }}"
        #qos_adaptive_policy_group: "{{ omit if( UserInputs.nas_application_template.qos.policy.name is not defined or  (UserInputs.nas_application_template.qos.policy.name != 'extreme' and  UserInputs.nas_application_template.qos.policy.name != 'performance' and UserInputs.nas_application_template.qos.policy.name != 'value')) else UserInputs.nas_application_template.qos.policy.name }}"
        #export_policy: "{{ UserInputs.nas_application_template.export_policy.name  | default(omit) }}"
        # nas_application_template: 
        #     use_nas_application: true
        #     storage_service: "{{ UserInputs.nas_application_template.storage_service.name  | default(omit) }}"
        #     tiering:
        #         control: "{{ UserInputs.nas_application_template.tiering.control  | default(omit) }}"
        #         policy: "{{ UserInputs.nas_application_template.tiering.policy  | default(omit) }}"
        #         object_stores: "{{ UserInputs.nas_application_template.tiering.object_stores[0] | default(omit) }}"
        #     nfs_access: "{{ UserInputs.nas_application_template.nfs_access  | default(omit) }}"
        #     cifs_access: "{{ UserInputs.nas_application_template.cifs_access  | default(omit) }}"
        

