name: Create SVMs For Service
help: This is used to create the required SVMs for a service
roles:
  - Provision
description: New Service SVMs creation
categories:
  - Provision
icon: scroll
playbook: create_service_svm.yaml
inventory: hosts
type: ansible	
fields:
  - type: expression
    name: settings
    label: settings
    expression: fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','')
    noOutput: true
    hide: true
  - type: expression
    name: aiqum
    expression: fn.fnJq($(settings),'.general.aiqum')
    label: aiqum
    hide: true
    noOutput: true
  - type: expression
    name: login
    label: login
    expression: "'ONTAP'"
    asCredential: true
    hide: true
  - type: expression
    name: adlogin
    label: login
    expression: "'AD'"
    asCredential: true
    hide: true
  - type: expression
    name: aiqumlogin
    label: aiqumlogin
    expression: "'AIQUM'"
    asCredential: true
    hide: true
  - type: expression
    name: datasource_info
    label: datasource_info
    expression: fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/admin/datasources/clusters','','AIQUM','[.records[]|{name:.name}+{key:.key}]','','')
    hide: true
    noOutput: true
  - type: expression
    name: clusterpeers
    label: clusterpeers
    dbConfig:
      name: AIQUMSQL
      type: mysql
    hide: true
    query: select cluster.name as src, cluster_peer.remoteClusterName as dst,
      cluster_peer.availability as status from netapp_model_view.cluster_peer,
      netapp_model_view.cluster where cluster_peer.clusterId=cluster.objId
    noOutput: true
  - type: expression
    name: allip
    label: allip
    dbConfig:
      name: AIQUMSQL
      type: mysql
    hide: true
    query: select network_failover_group.name as bd,network_lif.address as addr from
      netapp_model_view.network_lif,netapp_model_view.network_failover_group
      where network_lif.failoverGroupId=network_failover_group.objid
    noOutput: true
  - type: expression
    name: ports
    label: ports
    dbConfig:
      name: AIQUMSQL
      type: mysql
    hide: true
    query: select cluster.name as cluster,node.name as node, network_port.name as
      port,network_port_broadcast_domain.name as bd from
      netapp_model_view.network_port,netapp_model_view.network_port_broadcast_domain,netapp_model_view.cluster,
      netapp_model_view.node where
      network_port_broadcast_domain.objid=network_port.networkPortBroadcastDomainId
      and network_port.clusterId=cluster.objid and
      network_port.nodeId=node.objid and network_port.linkStatus='UP' and
      network_port_broadcast_domain.name != 'Cluster' order by network_port.name
    noOutput: true
    group: Production
  - type: query
    name: service
    label: Service
    expression: fn.fnJq($(settings),'.services|keys')
    required: true
    default: __auto__
    model: general.service
  - type: query
    name: company
    label: Company
    expression: fn.fnJq($(settings),'.services|."$(service)"|keys')
    required: true
    default: __auto__
    model: general.company
  - type: query
    name: environment
    label: Environment
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|keys')
    required: true
    default: __auto__
    model: general.environment
  - type: query
    name: location
    label: Location
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|keys')
    required: true
    default: __auto__
    model: general.location
  - type: expression
    name: copy_types_jq
    label: copy_types_jq
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|keys')
    noOutput: true
  - type: expression
    name: dr1
    label: dr1
    hide: true
    runLocal: true
    expression: $(copy_types_jq).includes('dr1')
    noOutput: true
  - type: expression
    name: b2d1
    label: b2d1
    hide: true
    runLocal: true
    expression: $(copy_types_jq).includes('b2d1')
    noOutput: true    
  - type: expression
    name: dr2
    label: dr2
    hide: true
    runLocal: true
    expression: $(copy_types_jq).includes('dr2')
    noOutput: true
  - type: expression
    name: b2d2
    label: b2d2
    hide: true
    runLocal: true
    expression: $(copy_types_jq).includes('b2d2')
    noOutput: true
  - type: expression
    name: cluster_filter_jq
    label: cluster_filter_jq
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.prod|.clusters|keys|join("%7C")')
    group: Production
    noOutput: true    
  - type: expression
    name: cluster_filter
    label: cluster_filter
    hide: true
    expression: "'$(cluster_filter_jq)'==''?'':'?name=$(cluster_filter_jq)'"
    runLocal: true
    group: Production
    noOutput: true        
  - type: query
    name: cluster_list
    label: Select cluster
    expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/cluster/clusters$(cluster_filter)','','AIQUM',
      'def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 +
      0.5|floor/100.0;[.records[]|{Name:.name}+{Version:((.version.generation|t\
      ostring)+\".\"+(.version.major|tostring)+\".\"+(.version.minor|tostring))\
      }+{Location: .location}+{Contact:.contact}+{\"Total
      Capacity\":(.storage_capacity.total/1024/1024/1024)|round|gb}+{\"Available
      Capacity\":(.storage_capacity.available/1024/1024/1024)|round|gb}+{AvailR\
      aw:.storage_capacity.available}]',[{AvailRaw:{direction:\"desc\"}},{Perf:\
      {direction:\"asc\"}}],'')"
    columns:
      - Name
      - Version
      - Location
      - Contact
      - Total Capacity
      - Available Capacity
    required: true
    default: __auto__
    group: Production
    outputObject: false
    noOutput: true
  - type: expression
    name: cluster
    label: cluster
    expression: "'$(cluster_list)'"
    hide: true
    group: Production
    model: prod.cluster
  - type: expression
    name: cluster_key
    label: cluster_key
    expression: fn.fnJq($(datasource_info),'.[]|select(.name=="$(cluster)")|.key')
    hide: true
    group: Production
    model: prod.clusterkey
  - type: expression
    name: existingsvms
    label: existingsvms
    expression: fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(cluster_list)&max_records=1000','','AIQUM','[.records[]|.name]','','')
    hide: true
    group: Production
    noOutput: true
  - type: text
    name: svm
    label: SVM Name
    default: ""
    required: true
    minLength: 1
    maxLength: 30
    keydown: true
    regex:
      expression: ^[a-z0-9_]*$
      description: Invalid SVM Name
    notIn:
      field: existingsvms
      description: SVM already exists
    icon: user
    group: Production
    model: prod.svm
  - type: expression
    name: netdetails
    label: netdetails
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.prod|.newsvm|.network')
    model: prod.netdetails
    group: Production
  - type: expression
    name: netname
    label: netname
    expression: ($(netdetails)).name
    hide: true
    runLocal: true
    noOutput: true
    group: Production
  - type: expression
    name: lifcount
    label: lifcount
    expression: ($(netdetails)).lifcount
    hide: true
    runLocal: true
    noOutput: true
    group: Production
  - type: expression
    name: domain
    label: domain
    expression: ($(netdetails)).domain
    hide: true
    runLocal: true
    noOutput: true
    group: Production
  - type: expression
    name: domaindetails
    label: domaindetails
    hide: true
    expression: fn.fnJq($(settings),'.domains|."$(domain)"')
    model: prod.domaindetails
    group: Production
  - type: expression
    name: subnetmask
    label: subnetmask
    expression: fn.fnJq($(settings),'.networks|."$(netname)"|.subnetmask')
    hide: true
    noOutput: true
    group: Production
  - type: expression
    name: iprange
    label: iprange
    expression: fn.fnJq($(settings),'.networks|."$(netname)"|.iprange')
    hide: true
    noOutput: true
    group: Production
  - type: expression
    name: iplist
    label: iplist
    hide: true
    expression: fnc.fnIpRangeToList('$(iprange)')
    noOutput: true
    group: Production
  - type: expression
    name: usedip
    label: usedip
    hide: true
    expression: fn.fnJq($(allip),'[.[]|select (.bd==\"$(netname)\")|.addr]')
    noOutput: true
    group: Production
  - type: expression
    name: availableip
    label: avaialbleip
    hide: true
    runLocal: true
    expression: (($(iplist)).filter(x=>!~($(usedip)).indexOf(x)).slice(0,$(lifcount)).length<$(lifcount))?[]:($(iplist)).filter(x=>!~($(usedip)).indexOf(x)).slice(0,$(lifcount))
    noOutput: true
    group: Production
  - type: expression
    name: selectedports
    label: selectedports
    hide: true
    expression: fn.fnJq($(ports),'[.[]|select (.cluster==\"$(cluster)\" and
      .bd==\"$(netname)\")] | .[:$(lifcount)]')
    noOutput: true
    group: Production
  - type: expression
    name: allocationstatus
    label: IP/Port allocation status
    hide: false
    expression: ($(availableip).length<$(lifcount))?'Not enough IP addresses
      avaialble':(($(selectedports).length<$(lifcount))?'Not enought ports to
      host requested IP addresses':'IP and port requirements are satisfied')
    runLocal: true
    noOutput: true
    regex:
      expression: satisfied
      description: requirments are not satisfied
    group: Production
  - type: expression
    name: lifs
    label: lifs
    hide: true
    runLocal: true
    expression: $(selectedports).map((x,i)=>({...x,ip:$(availableip)[i],netmask:'$(subnetmask)'}))
    model: prod.lifs
    group: Production
  - type: expression
    name: dr1_cluster_filter_jq
    label: dr1_cluster_filter_jq
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.dr1|.clusters|keys|join("%7C")')
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
    noOutput: true 
  - type: expression
    name: dr1_cluster_filter
    label: dr1_cluster_filter
    hide: true
    expression: "'$(dr1_cluster_filter_jq)'==''?'':'?name=$(dr1_cluster_filter_jq)'"
    runLocal: true
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
    noOutput: true 
  - type: query
    name: dr1_cluster_list
    label: Select cluster
    expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/cluster/clusters$(dr1_cluster_filter)','',
      'AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def
      roundit: .*100.0 +
      0.5|floor/100.0;[.records[]|{Name:.name}+{Version:((.version.generation|t\
      ostring)+\".\"+(.version.major|tostring)+\".\"+(.version.minor|tostring))\
      }+{Location: .location}+{Contact:.contact}+{\"Total
      Capacity\":(.storage_capacity.total/1024/1024/1024)|round|gb}+{\"Available
      Capacity\":(.storage_capacity.available/1024/1024/1024)|round|gb}+{AvailR\
      aw:.storage_capacity.available}]',[{AvailRaw:{direction:\"desc\"}},{Perf:\
      {direction:\"asc\"}}],'')"
    columns:
      - Name
      - Version
      - Location
      - Contact
      - Total Capacity
      - Available Capacity
    required: true
    default: __auto__
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
    outputObject: false
    noOutput: true
  - type: expression
    name: dr1_cluster
    label: dr1_cluster
    expression: "'$(dr1_cluster_list)'"
    default: ""
    hide: true
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
    model: dr1.cluster
  - type: expression
    name: dr1_cluster_key
    label: dr1_cluster_key
    expression: fn.fnJq($(datasource_info),'.[]|select(.name=="$(dr1_cluster)")|.key')
    hide: true
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
    model: dr1.clusterkey
  - type: expression
    name: dr1_source_copy
    label: dr1_source_copy
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.dr1|.source|.copy')
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
    model: dr1.sourcecopy
  - type: expression
    name: dr1_source_cluster
    label: dr1_source_cluster
    runLocal: true
    hide: true
    expression: "'$(dr1_source_copy)'==='prod'?'$(cluster)':'$(dr1_source_copy)'===\
      'dr2'?'$(dr2_cluster)':'$(dr1_source_copy)'==='b2d1'?'$(b2d1_cluster)':'$\
      (dr1_source_copy)'==='b2d2'?'$(b2d2_cluster)':''"
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
    model: dr1.sourcecluster
  - type: expression
    name: dr1_cluster_peer
    label: dr1_cluster_peer
    expression: fn.fnJq($(clusterpeers),'.[]| select (.src=="$(dr1_cluster)" and
      .dst=="$(dr1_source_cluster)" and .status=="AVAILABLE")|.dst')
    hide: true
    noOutput: true
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_svmsuffix
    label: dr1_svmsuffix
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.dr1|.newsvm|.suffix')
    group: DR1
    noOutput: true
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_existingsvms
    label: dr1_existingsvms
    expression: fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(dr1_cluster)&max_records=1000','','AIQUM','[.records[]|.name]|.
      +=["$(svm)"]','','')
    hide: true
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
    noOutput: true
  - type: expression
    name: dr1_svm
    label: SVM Name
    hide: false
    runLocal: true
    expression: "'$(dr1_svmsuffix)'=='null' || '$(dr1_svmsuffix)'=='' ?
      '$(svm)'+'_dr1' : '$(svm)'+'$(dr1_svmsuffix)'"
    default: ""
    group: DR1
    model: dr1.svm
    dependencies:
      - name: dr1
        values:
          - true
    editable: true
    regex:
      expression: ^[a-z0-9_]*$
      description: Invalid SVM Name
    notIn:
      field: dr1_existingsvms
      description: SVM already exists or duplicate
    icon: user
  - type: expression
    name: dr1_netdetails
    label: dr1_netdetails
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.dr1|.newsvm|.network')
    model: dr1.netdetails
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_netname
    label: dr1_netname
    expression: ($(dr1_netdetails)).name
    hide: true
    runLocal: true
    noOutput: true
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_lifcount
    label: dr1_lifcount
    expression: ($(dr1_netdetails)).lifcount
    hide: true
    runLocal: true
    noOutput: true
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_domain
    label: dr1_domain
    expression: ($(dr1_netdetails)).domain
    hide: true
    runLocal: true
    noOutput: true
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_domaindetails
    label: dr1_domaindetails
    hide: true
    expression: fn.fnJq($(settings),'.domains|."$(dr1_domain)"')
    model: dr1.domaindetails
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_subnetmask
    label: dr1_subnetmask
    expression: fn.fnJq($(settings),'.networks|."$(dr1_netname)"|.subnetmask')
    hide: true
    noOutput: true
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_iprange
    label: dr1_iprange
    expression: fn.fnJq($(settings),'.networks|."$(dr1_netname)"|.iprange')
    hide: true
    noOutput: true
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_iplist
    label: dr1_iplist
    hide: true
    expression: fnc.fnIpRangeToList('$(dr1_iprange)',$(availableip))
    noOutput: true
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_usedip
    label: dr1_usedip
    hide: true
    expression: fn.fnJq($(allip),'[.[]|select (.bd==\"$(dr1_netname)\")|.addr]')
    noOutput: true
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_availableip
    label: dr1_availableip
    hide: true
    runLocal: true
    expression: (($(dr1_iplist)).filter(x=>!~($(dr1_usedip)).indexOf(x)).slice(0,$(dr1_lifcount)).length<$(dr1_lifcount))?[]:($(dr1_iplist)).filter(x=>!~($(dr1_usedip)).indexOf(x)).slice(0,$(dr1_lifcount))
    default: []
    noOutput: true
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_selectedports
    label: dr1_selectedports
    hide: true
    expression: fn.fnJq($(ports),'[.[]|select (.cluster==\"$(dr1_cluster)\" and
      .bd==\"$(dr1_netname)\")] | .[:$(dr1_lifcount)]')
    noOutput: true
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_allocationstatus
    label: IP/Port allocation status
    hide: false
    expression: ($(dr1_availableip)).length<$(dr1_lifcount)?'Not enough IP addresses
      avaialble':($(dr1_selectedports)).length<$(dr1_lifcount)?'Not enought
      ports to host requested IP
      addresses':'$(dr1_cluster_peer)'==''&&'$(dr1_cluster)'!='$(dr1_source_cluster)'?'Cluster
      peer to $(dr1_source_cluster) is missing or not healthy':!(['prod'].includes('$(dr1_source_copy)'))?'source cpoy can be only:prod currently:$(dr1_source_copy)':'IP, ports and
      cluster peer requirements are satisfied, souce copy:$(dr1_source_copy)'
    runLocal: true
    noOutput: true
    regex:
      expression: satisfied
      description: requirments are not satisfied
    ignoreIncomplete: false
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_lifs
    label: dr1_lifs
    hide: true
    runLocal: true
    expression: $(dr1_selectedports).map((x,i)=>({...x,ip:$(dr1_availableip)[i],netmask:'$(dr1_subnetmask)'}))
    model: dr1.lifs
    group: DR1
    dependencies:
      - name: dr1
        values:
          - true

  - type: expression
    name: b2d1_cluster_filter_jq
    label: b2d1_cluster_filter_jq
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.b2d1|.clusters|keys|join("%7C")')
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
    noOutput: true 
  - type: expression
    name: b2d1_cluster_filter
    label: b2d1_cluster_filter
    hide: true
    expression: "'$(b2d1_cluster_filter_jq)'==''?'':'?name=$(b2d1_cluster_filter_jq)'"
    runLocal: true
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
    noOutput: true           
  - type: query
    name: b2d1_cluster_list
    label: Select cluster
    expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/cluste\
      r/clusters$(b2d1_cluster_filter)','','AIQUM','def
      gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def
      roundit: .*100.0 +
      0.5|floor/100.0;[.records[]|{Name:.name}+{Version:((.version.generation|t\
      ostring)+\".\"+(.version.major|tostring)+\".\"+(.version.minor|tostring))\
      }+{Location: .location}+{Contact:.contact}+{\"Total
      Capacity\":(.storage_capacity.total/1024/1024/1024)|round|gb}+{\"Available
      Capacity\":(.storage_capacity.available/1024/1024/1024)|round|gb}+{AvailR\
      aw:.storage_capacity.available}]',[{AvailRaw:{direction:\"desc\"}},{Perf:\
      {direction:\"asc\"}}],'')"
    columns:
      - Name
      - Version
      - Location
      - Contact
      - Total Capacity
      - Available Capacity
    required: true
    default: __auto__
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
    outputObject: false
    noOutput: true
  - type: expression
    name: b2d1_cluster
    label: b2d1_cluster
    expression: "'$(b2d1_cluster_list)'"
    default: ""
    hide: true
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
    model: b2d1.cluster
  - type: expression
    name: b2d1_cluster_key
    label: b2d1_cluster_key
    expression: fn.fnJq($(datasource_info),'.[]|select(.name=="$(b2d1_cluster)")|.key')
    hide: true
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
    model: b2d1.clusterkey
  - type: expression
    name: b2d1_source_copy
    label: b2d1_source_copy
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.b2d1|.source|.copy')
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
    model: b2d1.sourcecopy
  - type: expression
    name: b2d1_source_cluster
    label: b2d1_source_cluster
    runLocal: true
    hide: true
    expression: "'$(b2d1_source_copy)'==='prod'?'$(cluster)':'$(b2d1_source_copy)'=\
      =='dr1'?'$(dr1_cluster)':'$(b2d1_source_copy)'==='dr2'?'$(dr2_cluster)':'\
      $(b2d1_source_copy)'==='b2d2'?'$(b2d2_cluster)':''"
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
    model: b2d1.sourcecluster
  - type: expression
    name: b2d1_cluster_peer
    label: b2d1_cluster_peer
    expression: fn.fnJq($(clusterpeers),'.[]| select (.src=="$(b2d1_cluster)" and
      .dst=="$(b2d1_source_cluster)" and .status=="AVAILABLE")|.dst')
    hide: true
    noOutput: true
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_svmsuffix
    label: b2d1_svmsuffix
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.b2d1|.newsvm|.suffix')
    group: B2D1
    noOutput: true
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_existingsvms
    label: b2d1_existingsvms
    expression: fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(b2d1_cluster)&max_records=1000','','AIQUM','[.records[]|.name]|.
      +=["$(svm)"] |. +=["$(dr1_svm)"]|. +=["$(dr2_svm)"]','','')
    hide: true
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
    noOutput: true
  - type: expression
    name: b2d1_svm
    label: SVM Name
    hide: false
    runLocal: true
    expression: "'$(b2d1_svmsuffix)'=='null' || '$(b2d1_svmsuffix)'=='' ?
      '$(svm)'+'_b2d1' : '$(svm)'+'$(b2d1_svmsuffix)'"
    default: ""
    group: B2D1
    model: b2d1.svm
    dependencies:
      - name: b2d1
        values:
          - true
    editable: true
    regex:
      expression: ^[a-z0-9_]*$
      description: Invalid SVM Name
    notIn:
      field: b2d1_existingsvms
      description: SVM already exists or duplicate
    icon: user
  - type: expression
    name: b2d1_netdetails
    label: b2d1_netdetails
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.b2d1|.newsvm|.network')
    model: b2d1.netdetails
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_netname
    label: b2d1_netname
    expression: ($(b2d1_netdetails)).name
    hide: true
    runLocal: true
    noOutput: true
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_lifcount
    label: b2d1_lifcount
    expression: ($(b2d1_netdetails)).lifcount
    hide: true
    runLocal: true
    noOutput: true
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_domain
    label: b2d1_domain
    expression: ($(b2d1_netdetails)).domain
    hide: true
    runLocal: true
    noOutput: true
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_domaindetails
    label: b2d1_domaindetails
    hide: true
    expression: fn.fnJq($(settings),'.domains|."$(b2d1_domain)"')
    model: b2d1.domaindetails
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_subnetmask
    label: b2d1_subnetmask
    expression: fn.fnJq($(settings),'.networks|."$(b2d1_netname)"|.subnetmask')
    hide: true
    noOutput: true
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_iprange
    label: b2d1_iprange
    expression: fn.fnJq($(settings),'.networks|."$(b2d1_netname)"|.iprange')
    hide: true
    noOutput: true
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_already_used_ip
    label: b2d1_already_used_ip
    hide: true
    runLocal: true
    expression: $(availableip).concat($(dr1_availableip),$(dr2_availableip))
    noOutput: true
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_iplist
    label: b2d1_iplist
    hide: true
    expression: fnc.fnIpRangeToList('$(b2d1_iprange)',$(b2d1_already_used_ip))
    noOutput: true
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_usedip
    label: b2d1_usedip
    hide: true
    expression: fn.fnJq($(allip),'[.[]|select (.bd==\"$(b2d1_netname)\")|.addr]')
    noOutput: true
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_availableip
    label: b2d1_avaialbleip
    hide: true
    runLocal: true
    expression: (($(b2d1_iplist)).filter(x=>!~($(b2d1_usedip)).indexOf(x)).slice(0,$(b2d1_lifcount)).length<$(b2d1_lifcount))?[]:($(b2d1_iplist)).filter(x=>!~($(b2d1_usedip)).indexOf(x)).slice(0,$(b2d1_lifcount))
    default: []
    noOutput: true
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_selectedports
    label: b2d1_selectedports
    hide: true
    expression: fn.fnJq($(ports),'[.[]|select (.cluster==\"$(b2d1_cluster)\" and
      .bd==\"$(b2d1_netname)\")] | .[:$(b2d1_lifcount)]')
    noOutput: true
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_allocationstatus
    label: IP/Port allocation status
    hide: false
    expression: ($(b2d1_availableip)).length<$(b2d1_lifcount)?'Not enough IP
      addresses avaialble':($(b2d1_selectedports)).length<$(b2d1_lifcount)?'Not
      enought ports to host requested IP
      addresses':'$(b2d1_cluster_peer)'==''&&'$(b2d1_cluster)'!='$(b2d1_source_cluster)'?'Cluster
      peer to $(b2d1_source_cluster) is missing or not healthy':!(['prod','dr1'].includes('$(b2d1_source_copy)'))?'source cpoy can be only:prod,dr1 currently:$(b2d1_source_copy)':'IP, ports and
      cluster peer requirements are satisfied, souce copy:$(b2d1_source_copy)'
    runLocal: true
    noOutput: true
    regex:
      expression: satisfied
      description: requirments are not satisfied
    ignoreIncomplete: false
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_lifs
    label: b2d1_lifs
    hide: true
    runLocal: true
    expression: $(b2d1_selectedports).map((x,i)=>({...x,ip:$(b2d1_availableip)[i],netmask:'$(b2d1_subnetmask)'}))
    model: b2d1.lifs
    group: B2D1
    dependencies:
      - name: b2d1
        values:
          - true



  - type: expression
    name: dr2_cluster_filter_jq
    label: dr2_cluster_filter_jq
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.dr2|.clusters|keys|join("%7C")')
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
    noOutput: true 
  - type: expression
    name: dr2_cluster_filter
    label: dr2_cluster_filter
    hide: true
    expression: "'$(dr2_cluster_filter_jq)'==''?'':'?name=$(dr2_cluster_filter_jq)'"
    runLocal: true
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
    noOutput: true           
  - type: query
    name: dr2_cluster_list
    label: Select cluster
    expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/cluste\
      r/clusters$(dr2_cluster_filter)','','AIQUM','def
      gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def
      roundit: .*100.0 +
      0.5|floor/100.0;[.records[]|{Name:.name}+{Version:((.version.generation|t\
      ostring)+\".\"+(.version.major|tostring)+\".\"+(.version.minor|tostring))\
      }+{Location: .location}+{Contact:.contact}+{\"Total
      Capacity\":(.storage_capacity.total/1024/1024/1024)|round|gb}+{\"Available
      Capacity\":(.storage_capacity.available/1024/1024/1024)|round|gb}+{AvailR\
      aw:.storage_capacity.available}]',[{AvailRaw:{direction:\"desc\"}},{Perf:\
      {direction:\"asc\"}}],'')"
    columns:
      - Name
      - Version
      - Location
      - Contact
      - Total Capacity
      - Available Capacity
    required: true
    default: __auto__
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
    outputObject: false
    noOutput: true
  - type: expression
    name: dr2_cluster
    label: dr2_cluster
    expression: "'$(dr2_cluster_list)'"
    default: ""
    hide: true
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
    model: dr2.cluster
  - type: expression
    name: dr2_cluster_key
    label: dr2_cluster_key
    expression: fn.fnJq($(datasource_info),'.[]|select(.name=="$(dr2_cluster)")|.key')
    hide: true
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
    model: dr2.clusterkey
  - type: expression
    name: dr2_source_copy
    label: dr2_source_copy
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.dr2|.source|.copy')
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
    model: dr2.sourcecopy
  - type: expression
    name: dr2_source_cluster
    label: dr2_source_cluster
    runLocal: true
    hide: true
    expression: "'$(dr2_source_copy)'==='prod'?'$(cluster)':'$(dr2_source_copy)'===\
      'dr1'?'$(dr1_cluster)':'$(dr2_source_copy)'==='b2d1'?'$(b2d1_cluster)':'$\
      (dr2_source_copy)'==='b2d2'?'$(b2d2_cluster)':''"
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
    model: dr2.sourcecluster
  - type: expression
    name: dr2_cluster_peer
    label: dr2_cluster_peer
    expression: fn.fnJq($(clusterpeers),'.[]| select (.src=="$(dr2_cluster)" and
      .dst=="$(dr2_source_cluster)" and .status=="AVAILABLE")|.dst')
    hide: true
    noOutput: true
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_svmsuffix
    label: dr2_svmsuffix
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.dr2|.newsvm|.suffix')
    group: DR2
    noOutput: true
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_existingsvms
    label: dr2_existingsvms
    expression: fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(dr2_cluster)&max_records=1000','','AIQUM','[.records[]|.name]|.
      +=["$(svm)"]|. +=["$(dr1_svm)"]','','')
    hide: true
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
    noOutput: true
  - type: expression
    name: dr2_svm
    label: SVM Name
    hide: false
    runLocal: true
    expression: "'$(dr2_svmsuffix)'=='null' || '$(dr2_svmsuffix)'=='' ?
      '$(svm)'+'_dr2' : '$(svm)'+'$(dr2_svmsuffix)'"
    default: ""
    group: DR2
    model: dr2.svm
    dependencies:
      - name: dr2
        values:
          - true
    editable: true
    regex:
      expression: ^[a-z0-9_]*$
      description: Invalid SVM Name
    notIn:
      field: dr2_existingsvms
      description: SVM already exists or duplicate
    icon: user
  - type: expression
    name: dr2_netdetails
    label: dr2_netdetails
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.dr2|.newsvm|.network')
    model: dr2.netdetails
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_netname
    label: dr2_netname
    expression: ($(dr2_netdetails)).name
    hide: true
    runLocal: true
    noOutput: true
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_lifcount
    label: dr2_lifcount
    expression: ($(dr2_netdetails)).lifcount
    hide: true
    runLocal: true
    noOutput: true
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_domain
    label: dr2_domain
    expression: ($(dr2_netdetails)).domain
    hide: true
    runLocal: true
    noOutput: true
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_domaindetails
    label: dr2_domaindetails
    hide: true
    expression: fn.fnJq($(settings),'.domains|."$(dr2_domain)"')
    model: dr2.domaindetails
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_subnetmask
    label: dr2_subnetmask
    expression: fn.fnJq($(settings),'.networks|."$(dr2_netname)"|.subnetmask')
    hide: true
    noOutput: true
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_iprange
    label: dr2_iprange
    expression: fn.fnJq($(settings),'.networks|."$(dr2_netname)"|.iprange')
    hide: true
    noOutput: true
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_already_used_ip
    label: dr2_already_used_ip
    hide: true
    runLocal: true
    expression: $(availableip).concat($(dr1_availableip))
    noOutput: true
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_iplist
    label: dr2_iplist
    hide: true
    expression: fnc.fnIpRangeToList('$(dr2_iprange)',$(dr2_already_used_ip))
    noOutput: true
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_usedip
    label: dr2_usedip
    hide: true
    expression: fn.fnJq($(allip),'[.[]|select (.bd==\"$(dr2_netname)\")|.addr]')
    noOutput: true
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_availableip
    label: dr2_avaialbleip
    hide: true
    runLocal: true
    expression: (($(dr2_iplist)).filter(x=>!~($(dr2_usedip)).indexOf(x)).slice(0,$(dr2_lifcount)).length<$(dr2_lifcount))?[]:($(dr2_iplist)).filter(x=>!~($(dr2_usedip)).indexOf(x)).slice(0,$(dr2_lifcount))
    default: []
    noOutput: true
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_selectedports
    label: dr2_selectedports
    hide: true
    expression: fn.fnJq($(ports),'[.[]|select (.cluster==\"$(dr2_cluster)\" and
      .bd==\"$(dr2_netname)\")] | .[:$(dr2_lifcount)]')
    noOutput: true
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_allocationstatus
    label: IP/Port allocation status
    hide: false
    expression: ($(dr2_availableip)).length<$(dr2_lifcount)?'Not enough IP addresses
      avaialble':($(dr2_selectedports)).length<$(dr2_lifcount)?'Not enought
      ports to host requested IP
      addresses':'$(dr2_cluster_peer)'==''&&'$(dr2_cluster)'!='$(dr2_source_cluster)'?'Cluster
      peer to $(dr2_source_cluster) is missing or not healthy':!(['prod','dr1','b2d1'].includes('$(dr2_source_copy)'))?'source cpoy can be only:prod,dr1,b2d1 currently:$(dr2_source_copy)':'IP, ports and
      cluster peer requirements are satisfied, souce copy:$(dr2_source_copy)'
    runLocal: true
    noOutput: true
    regex:
      expression: satisfied
      description: requirments are not satisfied
    ignoreIncomplete: false
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_lifs
    label: dr2_lifs
    hide: true
    runLocal: true
    expression: $(dr2_selectedports).map((x,i)=>({...x,ip:$(dr2_availableip)[i],netmask:'$(dr2_subnetmask)'}))
    model: dr2.lifs
    group: DR2
    dependencies:
      - name: dr2
        values:
          - true

  - type: expression
    name: b2d2_cluster_filter_jq
    label: b2d2_cluster_filter_jq
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.b2d2|.clusters|keys|join("%7C")')
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
    noOutput: true 
  - type: expression
    name: b2d2_cluster_filter
    label: b2d2_cluster_filter
    hide: true
    expression: "'$(b2d2_cluster_filter_jq)'==''?'':'?name=$(b2d2_cluster_filter_jq)'"
    runLocal: true
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
    noOutput: true           
  - type: query
    name: b2d2_cluster_list
    label: Select cluster
    expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/cluste\
      r/clusters$(b2d2_cluster_filter)','','AIQUM','def
      gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def
      roundit: .*100.0 +
      0.5|floor/100.0;[.records[]|{Name:.name}+{Version:((.version.generation|t\
      ostring)+\".\"+(.version.major|tostring)+\".\"+(.version.minor|tostring))\
      }+{Location: .location}+{Contact:.contact}+{\"Total
      Capacity\":(.storage_capacity.total/1024/1024/1024)|round|gb}+{\"Available
      Capacity\":(.storage_capacity.available/1024/1024/1024)|round|gb}+{AvailR\
      aw:.storage_capacity.available}]',[{AvailRaw:{direction:\"desc\"}},{Perf:\
      {direction:\"asc\"}}],'')"
    columns:
      - Name
      - Version
      - Location
      - Contact
      - Total Capacity
      - Available Capacity
    required: true
    default: __auto__
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
    outputObject: false
    noOutput: true
  - type: expression
    name: b2d2_cluster
    label: b2d2_cluster
    expression: "'$(b2d2_cluster_list)'"
    default: ""
    hide: true
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
    model: b2d2.cluster
  - type: expression
    name: b2d2_cluster_key
    label: b2d2_cluster_key
    expression: fn.fnJq($(datasource_info),'.[]|select(.name=="$(b2d2_cluster)")|.key')
    hide: true
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
    model: b2d2.clusterkey
  - type: expression
    name: b2d2_source_copy
    label: b2d2_source_copy
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.b2d2|.source|.copy')
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
    model: b2d2.sourcecopy
  - type: expression
    name: b2d2_source_cluster
    label: b2d2_source_cluster
    runLocal: true
    hide: true
    expression: "'$(b2d2_source_copy)'==='prod'?'$(cluster)':'$(b2d2_source_copy)'=\
      =='dr1'?'$(dr1_cluster)':'$(b2d2_source_copy)'==='dr2'?'$(dr2_cluster)':'\
      $(b2d2_source_copy)'==='b2d1'?'$(b2d1_cluster)':''"
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
    model: b2d2.sourcecluster
  - type: expression
    name: b2d2_cluster_peer
    label: b2d2_cluster_peer
    expression: fn.fnJq($(clusterpeers),'.[]| select (.src=="$(b2d2_cluster)" and
      .dst=="$(b2d2_source_cluster)" and .status=="AVAILABLE")|.dst')
    hide: true
    noOutput: true
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_svmsuffix
    label: b2d2_svmsuffix
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.b2d2|.newsvm|.suffix')
    group: B2D2
    noOutput: true
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_existingsvms
    label: b2d2_existingsvms
    expression: fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(b2d2_cluster)&max_records=1000','','AIQUM','[.records[]|.name]|.
      +=["$(svm)"]|. +=["$(dr1_svm)"]|. +=["$(dr2_svm)"]|.
      +=["$(b2d1_svm)"]','','')
    hide: true
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
    noOutput: true
  - type: expression
    name: b2d2_svm
    label: SVM Name
    hide: false
    runLocal: true
    expression: "'$(b2d2_svmsuffix)'=='null' || '$(b2d2_svmsuffix)'=='' ?
      '$(svm)'+'_b2d2' : '$(svm)'+'$(b2d2_svmsuffix)'"
    default: ""
    group: B2D2
    model: b2d2.svm
    dependencies:
      - name: b2d2
        values:
          - true
    editable: true
    regex:
      expression: ^[a-z0-9_]*$
      description: Invalid SVM Name
    notIn:
      field: b2d2_existingsvms
      description: SVM already exists or duplicate
    icon: user
  - type: expression
    name: b2d2_netdetails
    label: b2d2_netdetails
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|.b2d2|.newsvm|.network')
    model: b2d2.netdetails
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_netname
    label: b2d2_netname
    expression: ($(b2d2_netdetails)).name
    hide: true
    runLocal: true
    noOutput: true
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_lifcount
    label: b2d2_lifcount
    expression: ($(b2d2_netdetails)).lifcount
    hide: true
    runLocal: true
    noOutput: true
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_domain
    label: b2d2_domain
    expression: ($(b2d2_netdetails)).domain
    hide: true
    runLocal: true
    noOutput: true
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_domaindetails
    label: b2d2_domaindetails
    hide: true
    expression: fn.fnJq($(settings),'.domains|."$(b2d2_domain)"')
    model: b2d2.domaindetails
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_subnetmask
    label: b2d2_subnetmask
    expression: fn.fnJq($(settings),'.networks|."$(b2d2_netname)"|.subnetmask')
    hide: true
    noOutput: true
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_iprange
    label: b2d2_iprange
    expression: fn.fnJq($(settings),'.networks|."$(b2d2_netname)"|.iprange')
    hide: true
    noOutput: true
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_already_used_ip
    label: b2d2_already_used_ip
    hide: true
    runLocal: true
    expression: $(availableip).concat($(dr1_availableip),$(dr2_availableip),$(b2d1_availableip))
    noOutput: true
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_iplist
    label: b2d2_iplist
    hide: true
    expression: fnc.fnIpRangeToList('$(b2d2_iprange)',$(b2d2_already_used_ip))
    noOutput: true
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_usedip
    label: b2d2_usedip
    hide: true
    expression: fn.fnJq($(allip),'[.[]|select (.bd==\"$(b2d2_netname)\")|.addr]')
    noOutput: true
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_availableip
    label: b2d2_avaialbleip
    hide: true
    runLocal: true
    expression: (($(b2d2_iplist)).filter(x=>!~($(b2d2_usedip)).indexOf(x)).slice(0,$(b2d2_lifcount)).length<$(b2d2_lifcount))?[]:($(b2d2_iplist)).filter(x=>!~($(b2d2_usedip)).indexOf(x)).slice(0,$(b2d2_lifcount))
    default: []
    noOutput: true
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_selectedports
    label: b2d2_selectedports
    hide: true
    expression: fn.fnJq($(ports),'[.[]|select (.cluster==\"$(b2d2_cluster)\" and
      .bd==\"$(b2d2_netname)\")] | .[:$(b2d2_lifcount)]')
    noOutput: true
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_allocationstatus
    label: IP/Port allocation status
    hide: false
    expression: ($(b2d2_availableip)).length<$(b2d2_lifcount)?'Not enough IP
      addresses avaialble':($(b2d2_selectedports)).length<$(b2d2_lifcount)?'Not
      enought ports to host requested IP
      addresses':'$(b2d2_cluster_peer)'==''&&'$(b2d2_cluster)'!='$(b2d2_source_cluster)'?'Cluster
      peer to $(b2d2_source_cluster) is missing or not healthy':!(['prod','dr1','b2d1','dr2'].includes('$(b2d2_source_copy)'))?'source cpoy can be only:prod,dr1,b2d1,dr2 currently:$(b2d2_source_copy)':'IP, ports and
      cluster peer requirements are satisfied, souce copy:$(b2d2_source_copy)'
    runLocal: true
    noOutput: true
    regex:
      expression: satisfied
      description: requirments are not satisfied
    ignoreIncomplete: false
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_lifs
    label: b2d2_lifs
    hide: true
    runLocal: true
    expression: $(b2d2_selectedports).map((x,i)=>({...x,ip:$(b2d2_availableip)[i],netmask:'$(b2d2_subnetmask)'}))
    model: b2d2.lifs
    group: B2D2
    dependencies:
      - name: b2d2
        values:
          - true
source: create_svm.yaml
