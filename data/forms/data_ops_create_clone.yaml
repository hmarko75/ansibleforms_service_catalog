- name: Create/Refresh clone 
  help: |
    Refresh clone (remove existing clone, and recreate a new one )
  roles:
    - Provision
  description: Create/Refresh clone 
  categories:
    - Dataops
  #tileClass: has-background-link
  icon: scroll
  type: ansible
  playbook: dataops_create_clone.yaml
  inventory: hosts
  fields:   
  #load global parameters 
  - type: expression
    name: settings
    label: settings
    expression: fn.fnReadYamlFile('/app/dist/persistent/dataops_globals.yaml','')
    noOutput: false
    hide: true   
    model: general

  - type: expression
    name: aiqum
    label: aiqum
    expression: fn.fnJq($(settings),'.aiqum')
    noOutput: true
    hide: true            

  - type: query
    name: volumedetails
    label: Select Volume to Clone
    dbConfig:
      name: AIQUMSQL
      type: mysql
    query: SELECT CONCAT(cluster.name,':',vserver.name,':',volume.name) as
      'Cluster:SVM:Volume', CONCAT(format(round(volume.size/1024/1024/1024,0),'T0'),'G') as Size,
      round(volume.size/1024/1024/1024,0) as sizeg,
      CONCAT(format(round(volume.sizeUsed/1024/1024/1024,0),'T0'),'G') as Used,
      cluster.name as cluster, volume.volType as Type,
      vserver.name as svm, volume.name as volume from netapp_model_view.cluster,
      netapp_model_view.vserver, netapp_model_view.volume 
      WHERE volume.vserverid = vserver.objid and vserver.clusterid = cluster.objid and volume.state =
      'ONLINE' and volume.isVserverRoot = 0 and volume.derivedStyle != 'CONSTITUENT' and volume.volType in ('RW','DP')  and
      vserver.type='DATA' and vserver.subtype in ('DEFAULT','DP_DESTINATION') ORDER BY 'Cluster:SVM:Volume' ASC
    columns:
      - Cluster:SVM:Volume
      - Type
      - Size
      - Used
    required: true
    default: __auto__
    outputObject: true
    noOutput: true
    group: Parent Volume
  - type: expression
    name: cluster
    expression: "'$(volumedetails.cluster)'"
    hide: true
    model: cluster
    group: Parent Volume    
  - type: expression
    name: svm
    expression: "'$(volumedetails.svm)'"
    hide: true
    model: source.svm 
    group: Parent Volume
  - type: expression
    name: volname
    label: volname
    expression: "'$(volumedetails.volume)'"
    hide: true
    model: source.volume
    group: Parent Volume
  - type: expression
    name: volumeuuid
    expression: fn.fnRestBasic('get','https://$(cluster)/api/storage/volumes?svm.name=$(svm)&name=$(volname)&fields=uuid&max_records=500','','ONTAP','.records[]|.uuid','','')
    hide: true   
    noOutput: true
    group: Parent Volume
  - type: query
    name: parent_snapshot
    label: Base Snapshot
    expression: fn.fnRestBasic('get','https://$(cluster)/api/storage/volumes/$(volumeuuid)/snapshots?name=!snapmirror*&fields=name,create_time,snapmirror_label&order_by=create_time desc','','ONTAP',
      '[(.records[]|{Snapshot:.name}+{"Creation Time":.create_time}+{"Snapmirror Label":(if .snapmirror_label == null then "none" else .snapmirror_label end)})|select(.Snapshot|startswith("vserverdr.")|not)]','','')
    default: __auto__
    multiple: false
    outputObject: false
    columns:
    - Snapshot
    - "Creation Time"
    - "Snapmirror Label"
    model: source.snapshot
    group: Parent Volume
  - type: checkbox
    name: clonerefresh
    label: Check to refresh existing clones 
    default: false
    placeholder: Refresh Existing Clone
    required: false
    group: Clone
  
  - type: query
    name: clonesvm
    label: Clone SVM
    expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(cluster)','','AIQUM','[{\"Name\":  \"$(svm)\"}]+([.records[]|{Name: .name}]|map(select(.Name != \"$(svm)\")))','','')"
    columns:
      - Name
    required: true
    default: __auto__
    group: Clone
    model: clone.svm
    dependencies:
      - name: clonerefresh
        values:
          - false  

  - type: expression
    name: existingvols
    label: existingvols
    expression: fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/volumes?cluster.name=$(cluster)&svm.name=$(svm)&max_records=1000','','AIQUM','[.records[]|.name]','','')
    hide: true
    noOutput: true
    group: Clone
    dependencies:
      - name: clonerefresh
        values:
          - false   

  - type: text
    name: clonename
    label: Clone Name
    default: ""
    required: true
    minLength: 1
    maxLength: 30
    regex:
      expression: ^[a-z0-9_]*$
      description: Invalid volume name
    notIn:
      field: existingvols
      description: Volume already exists
    icon: user
    group: Clone
    model: clone.volume
    dependencies:
      - name: clonerefresh
        values:
          - false 

  # - type: query
  #   name: exportpolicy
  #   label: Export Policy
  #   expression: "fn.fnRestBasic('get','https://$(cluster)/api/protocols/nfs/export-policies?svm.name=$(clonesvm)&max_records=500','','ONTAP','[.records[]|{Name: .name}]|map(select(.Name|startswith(\"cl_\")|not))|map(select(.Name|startswith(\"netapp_dataops_\")|not))','','')"
  #   columns:
  #     - Name
  #   required: true
  #   default: __auto__
  #   group: Clone
  #   model: clone.svm
  #   dependencies:
  #     - name: clonerefresh
  #       values:
  #         - false  

  - type: text
    name: exports
    label: Colon (:) Seperated Export Hosts
    default: ""
    required: false
    regex:
      expression: ^((([a-zA-Z0-9\.]){1,45}))(\:([a-zA-Z0-9\.]){1,45})*$
      description: Invalid export host list (should be colon seperated)
    icon: user
    model: clone.exporthosts
    group: Clone
    dependencies:
      - name: clonerefresh
        values:
          - false 

  - type: text
    name: junctionpath
    label: Junction Path
    default: ""
    required: false
    regex:
      expression: ^((\/([a-zA-Z0-9\.]){1,45})+)$
      description: Invalid junction path
    help: non default junction path (default will be /volname)
    icon: user
    model: clone.junctionpath
    group: Clone
    dependencies:
      - name: clonerefresh
        values:
          - false 

  - type: query
    name: existingclones
    label: Select existing clone
    expression: "fn.fnRestBasic('get','https://$(cluster)/api/storage/volumes?fields=comment,clone.is_flexclone,clone.parent_volume,clone.parent_svm,clone.parent_snapshot,svm.name,create_time&max_records=1000','','ONTAP','[.records[]| {\"SVM:Volume\": (.svm.name+\":\" +.name)} + {svm: .svm.name} + {volume: .name} + {Clone: .clone.is_flexclone} + {\"Clone Parent\": (if .clone.parent_volume.name == null then \"\" else .clone.parent_volume.name end)} + {\"Creation Time\": .create_time} + {\"Clone Parent SVM\": (if .clone.parent_svm.name == null then \"\" else .clone.parent_svm.name end)} + {\"Clone Parent Snapshot\": (if .clone.parent_snapshot.name == null then \"\" else .clone.parent_snapshot.name end)} + {\"Clone Splited\":(if(.comment|contains(\"CLONENAME\"))and(.clone.is_flexclone==false)then true else false end)}]|map(select (.Clone or .\"Clone Splited\"))|map(select (.\"Clone Parent SVM\"==\"$(svm)\" and .\"Clone Parent\"==\"$(volname)\"))','','')"
    columns:
      - SVM:Volume
      - Clone
      - Clone Parent Snapshot
      - Creation Time
    default: __auto__
    required: true
    outputObject: true
    group: Clone
    model: clone
    dependencies:
      - name: clonerefresh
        values:
          - true  

  - type: checkbox
    name: split
    label: Check to split new clone
    default: false
    placeholder: Split clone 
    required: false
    group: Clone

  - type: checkbox
    name: svm_dr_unprotect
    label: Check to disable SVM-DR protection for new clone 
    default: false
    placeholder: Disbale SVM-DR protection when clone SVM is protected using SVM-DR
    required: false
    group: Clone   

  - type: checkbox
    name: protect_clone
    label: Protect the clone with snapmirror based on clone parent protection 
    default: false
    placeholder: Protect the clone with snapmirror based on clone parent protection
    required: false
    group: Clone protection

  - type: expression
    name: parent_snapmirrors
    dbConfig:
      name: AIQUMSQL
      type: mysql
    hide: true
    noOutput: true
    query: SELECT cluster_src.name as src_cluster_name, vserver_src.name as      
            src_vserver_name, volume_src.name as src_volume_name, cluster_dst.name as dst_cluster_name, 
            vserver_dst.name as dst_vserver_name, volume_dst.name as dst_volume_name, snap_mirror.mirrorStateRaw AS mirror_state, 
            CASE WHEN snap_mirror.isHealthy=1 THEN 'Yes' ELSE 'No' END AS mirror_health FROM netapp_model_view.snap_mirror
            INNER JOIN netapp_model_view.cluster cluster_src ON snap_mirror.sourceClusterId = cluster_src.objId 
            INNER JOIN netapp_model_view.vserver vserver_src ON snap_mirror.sourceVserverId = vserver_src.objId 
            INNER JOIN netapp_model_view.volume volume_src ON snap_mirror.sourceVolumeId  = volume_src.objId 
            INNER JOIN netapp_model_view.cluster cluster_dst ON snap_mirror.destinationClusterId = cluster_dst.objId 
            INNER JOIN netapp_model_view.vserver vserver_dst ON snap_mirror.destinationVserverId = vserver_dst.objId 
            INNER JOIN netapp_model_view.volume volume_dst ON snap_mirror.destinationVolumeId  = volume_dst.objId 
            WHERE ((cluster_src.name = '$(cluster)' AND vserver_src.name='$(svm)' AND volume_src.name = '$(volname)') 
              or (cluster_dst.name = '$(cluster)' AND vserver_dst.name='$(svm)' AND volume_dst.name = '$(volname)')) 
              and snap_mirror.mirrorStateRaw = 'snapmirrored'
    group: Clone protection
    dependencies:
      - name: protect_clone
        values:
          - true 

  - type: query
    name: parent_snapmirrors_query
    label: Select parent snapmirror relationship to base clone protection on 
    expression: "fn.fnJq($(parent_snapmirrors), '[.[] | {src_cluster_name: .src_cluster_name} + {src_vserver_name: .src_vserver_name} + 
                  {src_volume_name: .src_volume_name} + {dst_cluster_name: .dst_cluster_name} + {dst_vserver_name: .dst_vserver_name} + 
                  {dst_volume_name: .dst_volume_name} + {\"SRC Path\": (.src_cluster_name+\":\"+.src_vserver_name+\":\"+.src_volume_name)} + 
                  {\"DST Path\": (.dst_cluster_name+\":\"+.dst_vserver_name+\":\"+.dst_volume_name)} + {\"Mirror Healthy\": .mirror_health} + 
                  {\"Type\": (if .dst_cluster_name==\"$(cluster)\" and .dst_vserver_name == \"$(svm)\" and .dst_volume_name == \"$(volname)\" then \"Destination\" else \"Source\" end)}]')"
    columns:
      - SRC Path
      - DST Path
      - Type
    required: true
    default: __auto__
    noOutput: true
    group: Clone protection
    dependencies:
      - name: protect_clone
        values:
          - true    

  - type: expression
    name: replication_cluster
    runLocal: true
    hide: true
    expression: ("$(parent_snapmirrors_query.Type)"=="Destination")?"$(parent_snapmirrors_query.src_cluster_name)":"$(parent_snapmirrors_query.dst_cluster_name)"
    model: protection.cluster
    group: Clone protection
    dependencies:
      - name: protect_clone
        values:
          - true  
  - type: expression
    name: replication_svm_target
    runLocal: true
    hide: true
    expression: ("$(parent_snapmirrors_query.Type)"=="Destination")?"$(parent_snapmirrors_query.src_vserver_name)":"$(parent_snapmirrors_query.dst_vserver_name)"
    model: protection.basesvm
    group: Clone protection
    dependencies:
      - name: protect_clone
        values:
          - true           

  - type: expression
    name: replication_vol
    runLocal: true
    hide: true
    expression: ("$(parent_snapmirrors_query.Type)"=="Destination")?"$(parent_snapmirrors_query.src_volume_name)":"$(parent_snapmirrors_query.dst_volume_name)"
    model: protection.basevol
    group: Clone protection
    dependencies:
      - name: protect_clone
        values:
          - true           

  - type: query
    name: replication_svm
    label: Clone protection SVM 
    expression: fn.fnRestBasic('get','https://$(replication_cluster)/api/svm/svms?subtype=default&fields=name,state','','ONTAP','[.records[]|{Name:.name}+{State:.state}]','','')
    default: __auto__
    multiple: false
    outputObject: false
    required: true
    columns:
    - Name
    - State 
    model: protection.svm
    group: Clone protection
    dependencies:
      - name: protect_clone
        values:
          - true

  - type: expression
    name: replication_existingvols
    label: existingvols
    expression: fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/volumes?cluster.name=$(replication_cluster)&svm.name=$(replication_svm)&max_records=1000','','AIQUM','[.records[]|.name]','','')
    hide: true
    noOutput: true
    group: Clone protection
    dependencies:
      - name: protect_clone
        values:
          - true   

  - type: text
    name: replication_clonename
    label: Clone Name
    default: ""
    required: true
    minLength: 1
    maxLength: 30
    model: protection.volume
    regex:
      expression: ^[a-z0-9_]*$
      description: Invalid volume name
    notIn:
      field: replication_existingvols
      description: Volume already exists
    icon: user
    group: Clone protection
    dependencies:
      - name: protect_clone
        values:
          - true  

  - type: query
    name: replication_scheudle
    label: Replication schedule
    expression: fn.fnRestBasic('get','https://$(replication_cluster)/api/cluster/schedules','','ONTAP','[.records[]|{Name:.name}]','','')
    default: __auto__
    multiple: false
    outputObject: false
    required: true
    columns:
    - Name
    model: protection.schedule
    group: Clone protection
    dependencies:
      - name: protect_clone
        values:
          - true

  - type: query
    name: replication_policy
    label: Replication policy
    expression: fn.fnRestBasic('get','https://$(replication_cluster)/api/snapmirror/policies?fields=svm.name','','ONTAP','[.records[]|select (.name != null)|{Name:.name}+{Owner:(if .svm.name==null then \"$(replication_cluster)\" else .svm.name end)}|select(.Owner==\"$(replication_cluster)\" or .Owner==\"$(replication_svm)\")]','','')
    default: __auto__
    multiple: false
    outputObject: false
    required: true
    columns:
    - Name
    - Owner
    model: protection.policy
    group: Clone protection
    dependencies:
      - name: protect_clone
        values:
          - true          