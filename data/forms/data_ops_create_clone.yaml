- name: Create/Refresh clone 
  help: |
    Refresh clone (remove existing clone, and recreate a new one )
  roles:
    - Provision
  description: Create/Refresh clone 
  categories:
    - Dataops
  #tileClass: has-background-link
  icon: scroll
  type: ansible
  playbook: dataops_create_clone.yaml
  inventory: hosts
  fields:   
  #load global parameters 
  - type: expression
    name: settings
    label: settings
    expression: fn.fnReadYamlFile('/app/dist/persistent/dataops_globals.yaml','')
    noOutput: false
    hide: true   
    model: general

  - type: expression
    name: aiqum
    label: aiqum
    expression: fn.fnJq($(settings),'.aiqum')
    noOutput: true
    hide: true            

  - type: query
    name: volumedetails
    label: Select Volume to Clone
    dbConfig:
      name: AIQUMSQL
      type: mysql
    query: SELECT CONCAT(cluster.name,':',vserver.name,':',volume.name) as
      'Cluster:SVM:Volume', CONCAT(format(round(volume.size/1024/1024/1024,0),'T0'),'G') as Size,
      round(volume.size/1024/1024/1024,0) as sizeg,
      CONCAT(format(round(volume.sizeUsed/1024/1024/1024,0),'T0'),'G') as Used,
      cluster.name as cluster, volume.volType as Type,
      vserver.name as svm, volume.name as volume from netapp_model_view.cluster,
      netapp_model_view.vserver, netapp_model_view.volume 
      WHERE volume.vserverid = vserver.objid and vserver.clusterid = cluster.objid and volume.state =
      'ONLINE' and volume.isVserverRoot = 0 and volume.derivedStyle != 'CONSTITUENT' and volume.volType in ('RW','DP')  and
      vserver.type='DATA' and vserver.subtype in ('DEFAULT','DP_DESTINATION') ORDER BY 'Cluster:SVM:Volume' ASC
    columns:
      - Cluster:SVM:Volume
      - Type
      - Size
      - Used
    required: true
    default: __auto__
    outputObject: true
    noOutput: true
    group: Parent Volume
  - type: expression
    name: cluster
    expression: "'$(volumedetails.cluster)'"
    hide: true
    model: cluster
    group: Parent Volume    
  - type: expression
    name: svm
    expression: "'$(volumedetails.svm)'"
    hide: true
    model: source.svm 
    group: Parent Volume
  - type: expression
    name: volname
    label: volname
    expression: "'$(volumedetails.volume)'"
    hide: true
    model: source.volume
    group: Parent Volume
  - type: expression
    name: volumeuuid
    expression: fn.fnRestBasic('get','https://$(cluster)/api/storage/volumes?svm.name=$(svm)&name=$(volname)&fields=uuid&max_records=500','','ONTAP','.records[]|.uuid','','')
    hide: true   
    noOutput: true
    group: Parent Volume
  - type: query
    name: parent_snapshot
    label: Base Snapshot
    expression: fn.fnRestBasic('get','https://$(cluster)/api/storage/volumes/$(volumeuuid)/snapshots?name=!snapmirror*&fields=name,create_time,snapmirror_label&order_by=create_time desc','','ONTAP',
      '[(.records[]|{Snapshot:.name}+{"Creation Time":.create_time}+{"Snapmirror Label":(if .snapmirror_label == null then "none" else .snapmirror_label end)})|select(.Snapshot|startswith("vserverdr.")|not)]','','')
    default: __auto__
    required: true
    multiple: false
    outputObject: false
    columns:
    - Snapshot
    - "Creation Time"
    - "Snapmirror Label"
    model: source.snapshot
    group: Parent Volume
  
  - type: checkbox
    name: clonerefresh
    label: Check to refresh existing clones 
    default: false
    placeholder: Refresh Existing Clone
    required: false
    group: Clone

  - type: checkbox
    name: cloneprotect
    label: Protect the clone
    help: Protect the clone with snapmirror based on clone parent snapmirror relationships (savings will be kept) 
    default: false
    placeholder: Protect the clone
    required: false
    group: Clone    

  - type: expression 
    name: clone_protect_and_refresh
    hide: true
    expression: "($(cloneprotect)&&$(clonerefresh))?true:false"
    runLocal: true
    noOutput: true 
    group: Clone

  - type: expression 
    name: clone_protect_and_not_refresh
    hide: true
    expression: "($(cloneprotect)&&!$(clonerefresh))?true:false"
    runLocal: true
    noOutput: true      
    group: Clone
  
  - type: checkbox
    name: split
    label: Split clone 
    default: false
    placeholder: Split clone 
    help: split clone from parent after creation. savings will not be preserved after split.
    required: false
    group: Clone  

  - type: query
    name: clonesvm
    label: Clone SVM
    expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(cluster)','','AIQUM','[{\"Name\":  \"$(svm)\"}]+([.records[]|{Name: .name}]|map(select(.Name != \"$(svm)\")))','','')"
    columns:
      - Name
    required: true
    default: __auto__
    group: Clone
    model: clone.svm
    dependencies:
      - name: clonerefresh
        values:
          - false  

  - type: expression
    name: existingvols
    label: existingvols
    expression: fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/volumes?cluster.name=$(cluster)&svm.name=$(clonesvm)&max_records=1000','','AIQUM','[.records[]|.name]','','')
    hide: true
    noOutput: true
    group: Clone
    dependencies:
      - name: clonerefresh
        values:
          - false   

  - type: text
    name: clonename
    label: Clone Name
    default: ""
    required: true
    minLength: 1
    maxLength: 30
    regex:
      expression: ^[a-z0-9_]*$
      description: Invalid volume name
    notIn:
      field: existingvols
      description: Volume already exists
    icon: user
    group: Clone
    model: clone.volume
    dependencies:
      - name: clonerefresh
        values:
          - false 

  - type: expression
    name: defaultsnapshotpolicy
    expression: fn.fnJq($(settings),'.default.snapshotpolicy')
    noOutput: true
    hide: true 
    
  - type: query
    name: snapshot_policy
    label: Snapshot Policy
    #expression: fn.fnRestBasic('get','https://$(cluster)/api/storage/snapshot-policies?fields=svm.name','','ONTAP','[{\"name\":\"$(defaultsnapshotpolicy)\"}] + ([.records[]|map(select(.name!=\"$(defaultsnapshotpolicy)\" and (.svm.name=\"$(clonesvm)\" or .svm.name==null)))])|{Name:.name}','','')
    expression: fn.fnRestBasic('get','https://$(cluster)/api/storage/snapshot-policies?fields=svm.name','','ONTAP','[{\"Name\":\"$(defaultsnapshotpolicy)\"}]+[.records[]|select(.name != \"$(defaultsnapshotpolicy)\")|select(.svm.name==\"$(clonesvm)\" or .svm.name == null)|{Name:.name}]','','')
    default: __auto__
    multiple: false
    outputObject: false
    required: true
    columns:
    - Name
    model: clone.snapshotpolicy
    group: Clone
    dependencies:
      - name: clonerefresh
        values:
          - false 

  # - type: query
  #   name: exportpolicy
  #   label: Export Policy
  #   expression: "fn.fnRestBasic('get','https://$(cluster)/api/protocols/nfs/export-policies?svm.name=$(clonesvm)&max_records=500','','ONTAP','[.records[]|{Name: .name}]|map(select(.Name|startswith(\"cl_\")|not))|map(select(.Name|startswith(\"netapp_dataops_\")|not))','','')"
  #   columns:
  #     - Name
  #   required: true
  #   default: __auto__
  #   group: Clone
  #   model: clone.svm
  #   dependencies:
  #     - name: clonerefresh
  #       values:
  #         - false  

  - type: text
    name: exports
    label: Colon (:) Seperated Export Hosts
    default: ""
    required: false
    regex:
      expression: ^((([a-zA-Z0-9\.]){1,45}))(\:([a-zA-Z0-9\.]){1,45})*$
      description: Invalid export host list (should be colon seperated)
    icon: user
    model: clone.exporthosts
    group: Clone
    dependencies:
      - name: clonerefresh
        values:
          - false 

  - type: text
    name: junctionpath
    label: Junction Path
    default: ""
    required: false
    regex:
      expression: ^((\/([a-zA-Z0-9\.]){1,45})+)$
      description: Invalid junction path
    help: non default junction path (default is /clonename)
    icon: user
    model: clone.junctionpath
    group: Clone
    dependencies:
      - name: clonerefresh
        values:
          - false 

  - type: query
    name: existingclones
    label: Select existing clone
    expression: "fn.fnRestBasic('get','https://$(cluster)/api/storage/volumes?fields=snapshot_policy.name,nas.path,comment,clone.is_flexclone,clone.parent_volume,clone.parent_svm,clone.parent_snapshot,svm.name,create_time&max_records=1000&type=RW','','ONTAP','[.records[]| {snapshotpolicy:.snapshot_policy.name}+{junctionpath:.nas.path}+{\"SVM:Volume\": (.svm.name+\":\" +.name)} + {svm: .svm.name} + {volume: .name} + {Clone: .clone.is_flexclone} + {\"Clone Parent\": (if .clone.parent_volume.name == null then \"\" else .clone.parent_volume.name end)} + {\"Creation Time\": .create_time} + {\"Clone Parent SVM\": (if .clone.parent_svm.name == null then \"\" else .clone.parent_svm.name end)} + {\"Clone Parent Snapshot\": (if .clone.parent_snapshot.name == null then \"\" else .clone.parent_snapshot.name end)} + {\"Clone Splited\":(if(.comment|contains(\"CLONENAME\"))and(.clone.is_flexclone==false)then true else false end)}]|map(select (.Clone or .\"Clone Splited\"))','','')"
    columns:
      - SVM:Volume
      - Clone
      - Clone Parent Snapshot
      - Creation Time
    default: __auto__
    required: true
    #noOutput: true
    outputObject: true
    group: Clone
    model: clone
    dependencies:
      - name: clonerefresh
        values:
          - true 

  - type: expression
    name: svmdr_relationship
    expression: "fn.fnRestBasic('get','https://$(cluster)/api/snapmirror/relationships?source.path=$(clonesvm):&fields=uuid&list_destinations_only=true','','ONTAP','[.records[]|{\"UUID\":.uuid}]','','')"
    hide: true
    noOutput: true
    group: Clone
    dependencies:
      - name: clonerefresh
        values:
          - false    
  
  - type: expression
    name: svmdr_source
    expression: ($(svmdr_relationship).length>0)?true:false
    hide: true
    runLocal: true
    noOutput: true
    group: Clone
    dependencies:
      - name: clonerefresh
        values:
          - false    

  - type: checkbox
    name: svm_dr_unprotect
    label: Disable SVM-DR protection for clone
    placeholder: Disable SVM-DR protection for clone
    default: false
    help: Disbale SVM-DR protection when clone SVM is protected using SVM-DR
    required: false
    model: clone.svm_dr_unprotect
    group: Clone  
    dependencies:
      - name: clonerefresh
        values:
          - false    
      - name: svmdr_source
        values:
          - true     

  - type: expression
    name: svmdr_relationship_refresh
    expression: "fn.fnRestBasic('get','https://$(cluster)/api/snapmirror/relationships?source.path=$(existingclones.svm):&fields=uuid&list_destinations_only=true','','ONTAP','[.records[]|{\"UUID\":.uuid}]','','')"
    hide: true
    noOutput: true
    group: Clone
    dependencies:
      - name: clonerefresh
        values:
          - true    
  
  - type: expression
    name: svmdr_source_refresh
    expression: ($(svmdr_relationship_refresh).length>0)?true:false
    hide: true
    runLocal: true
    noOutput: true
    group: Clone
    dependencies:
      - name: clonerefresh
        values:
          - true    

  - type: checkbox
    name: svm_dr_unprotect_refresh
    label: Disable SVM-DR protection for clone
    placeholder: Disable SVM-DR protection for clone
    default: false
    help: Disbale SVM-DR protection when clone SVM is protected using SVM-DR
    required: false
    model: clone.svm_dr_unprotect
    group: Clone  
    dependencies:
      - name: clonerefresh
        values:
          - true 
      - name: svmdr_source_refresh
        values:
          - true  


  - type: expression
    name: parent_snapmirrors
    dbConfig:
      name: AIQUMSQL
      type: mysql
    hide: true
    noOutput: true
    query: SELECT cluster_src.name as src_cluster_name, vserver_src.name as      
            src_vserver_name, volume_src.name as src_volume_name, cluster_dst.name as dst_cluster_name, 
            vserver_dst.name as dst_vserver_name, volume_dst.name as dst_volume_name, snap_mirror.mirrorStateRaw AS mirror_state, 
            CASE WHEN snap_mirror.isHealthy=1 THEN 'Yes' ELSE 'No' END AS mirror_health FROM netapp_model_view.snap_mirror
            INNER JOIN netapp_model_view.cluster cluster_src ON snap_mirror.sourceClusterId = cluster_src.objId 
            INNER JOIN netapp_model_view.vserver vserver_src ON snap_mirror.sourceVserverId = vserver_src.objId 
            INNER JOIN netapp_model_view.volume volume_src ON snap_mirror.sourceVolumeId  = volume_src.objId 
            INNER JOIN netapp_model_view.cluster cluster_dst ON snap_mirror.destinationClusterId = cluster_dst.objId 
            INNER JOIN netapp_model_view.vserver vserver_dst ON snap_mirror.destinationVserverId = vserver_dst.objId 
            INNER JOIN netapp_model_view.volume volume_dst ON snap_mirror.destinationVolumeId  = volume_dst.objId 
            WHERE ((cluster_src.name = '$(cluster)' AND vserver_src.name='$(svm)' AND volume_src.name = '$(volname)') 
              or (cluster_dst.name = '$(cluster)' AND vserver_dst.name='$(svm)' AND volume_dst.name = '$(volname)')) 
              and snap_mirror.mirrorStateRaw = 'snapmirrored'
    group: Clone protection
    dependencies:
    - name: cloneprotect
      values:
        - true 

  - type: query
    name: parent_snapmirrors_query
    label: Select parent snapmirror relationship to base clone protection on 
    expression: "fn.fnJq($(parent_snapmirrors), '[.[] | {src_cluster_name: .src_cluster_name} + {src_vserver_name: .src_vserver_name} + 
                  {src_volume_name: .src_volume_name} + {dst_cluster_name: .dst_cluster_name} + {dst_vserver_name: .dst_vserver_name} + 
                  {dst_volume_name: .dst_volume_name} + {\"SRC Path\": (.src_cluster_name+\":\"+.src_vserver_name+\":\"+.src_volume_name)} + 
                  {\"DST Path\": (.dst_cluster_name+\":\"+.dst_vserver_name+\":\"+.dst_volume_name)} + {\"Mirror Healthy\": .mirror_health} + 
                  {\"Type\": (if .dst_cluster_name==\"$(cluster)\" and .dst_vserver_name == \"$(svm)\" and .dst_volume_name == \"$(volname)\" then \"Destination\" else \"Source\" end)}]')"
    columns:
      - SRC Path
      - DST Path
      - Type
    required: true
    default: __auto__
    noOutput: true
    group: Clone protection
    dependencies:
    - name: clone_protect_and_not_refresh
      values:
        - true           
  

  - type: expression
    name: replication_cluster
    runLocal: true
    hide: true
    expression: ("$(parent_snapmirrors_query.Type)"=="Destination")?"$(parent_snapmirrors_query.src_cluster_name)":"$(parent_snapmirrors_query.dst_cluster_name)"
    model: protection.cluster
    group: Clone protection
    dependencies:
    - name: clone_protect_and_not_refresh
      values:
        - true           
          
  - type: expression
    name: replication_svm_target
    runLocal: true
    hide: true
    expression: ("$(parent_snapmirrors_query.Type)"=="Destination")?"$(parent_snapmirrors_query.src_vserver_name)":"$(parent_snapmirrors_query.dst_vserver_name)"
    model: protection.basesvm
    group: Clone protection
    dependencies:
    - name: clone_protect_and_not_refresh
      values:
        - true           


  - type: expression
    name: replication_vol
    runLocal: true
    hide: true
    expression: ("$(parent_snapmirrors_query.Type)"=="Destination")?"$(parent_snapmirrors_query.src_volume_name)":"$(parent_snapmirrors_query.dst_volume_name)"
    model: protection.basevol
    group: Clone protection
    dependencies:
    - name: clone_protect_and_not_refresh
      values:
        - true           


  - type: query
    name: replication_svm
    label: Clone protection SVM
    help: Only peered SVMs will be shown
    expression: fn.fnRestBasic('get','https://$(replication_cluster)/api/svm/peers?peer.cluster.name=$(cluster)&peer.svm.name=$(clonesvm)&fields=svm.name','','ONTAP','[.records[]|{Name:.svm.name}]','','')
    default: __auto__
    multiple: false
    outputObject: false
    required: true
    columns:
    - Name
    model: protection.svm
    group: Clone protection
    dependencies:
    - name: clone_protect_and_not_refresh
      values:
        - true

  - type: expression
    name: replication_existingvols
    label: existingvols
    expression: fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/volumes?cluster.name=$(replication_cluster)&svm.name=$(replication_svm)&max_records=1000','','AIQUM','[.records[]|.name]','','')
    hide: true
    noOutput: true
    group: Clone protection
    dependencies:
    - name: clone_protect_and_not_refresh
      values:
        - true

  - type: expression
    name: replication_clonename
    label: Clone Name
    expression: "'$(clonename)'"
    required: true
    editable: true
    minLength: 1
    maxLength: 30
    model: protection.volume
    regex:
      expression: ^[a-z0-9_]*$
      description: Invalid volume name
    notIn:
      field: replication_existingvols
      description: Volume already exists
    icon: user
    group: Clone protection
    dependencies:
    - name: clone_protect_and_not_refresh
      values:
        - true 

  - type: expression
    name: defaultschedule
    expression: fn.fnJq($(settings),'.default.schedule')
    noOutput: true
    hide: true 
    group: Clone protection
    dependencies:
    - name: cloneprotect
      values:
        - true
  
  - type: expression
    name: defaultpolicy
    expression: fn.fnJq($(settings),'.default.mirrorpolicy')
    noOutput: true
    hide: true             
    group: Clone protection
    dependencies:
    - name: cloneprotect
      values:
        - true          

  - type: query
    name: replication_scheudle
    label: Replication schedule
    expression: fn.fnRestBasic('get','https://$(replication_cluster)/api/cluster/schedules','','ONTAP','[{\"Name\":\"$(defaultschedule)\"}] + ([.records[]|{Name:.name}]|map(select(.Name!=\"$(defaultschedule)\")))','','')
    default: __auto__
    multiple: false
    outputObject: false
    required: true
    columns:
    - Name
    model: protection.schedule
    group: Clone protection
    dependencies:
    - name: clone_protect_and_not_refresh
      values:
        - true

  - type: query
    name: replication_policy
    label: Replication policy
    expression: "fn.fnRestBasic('get','https://$(replication_cluster)/api/snapmirror/policies?fields=svm.name','','ONTAP','[{\"Name\":  \"$(defaultpolicy)\"}+{\"Owner\": \"$(replication_cluster)\"}]+([.records[]|select (.name != null)|{Name:.name}+{Owner:(if .svm.name==null then \"$(replication_cluster)\" else .svm.name end)}|select(.Owner==\"$(replication_cluster)\" or .Owner==\"$(replication_svm)\")] |map(select(.Name != \"$(defaultpolicy)\")))','','')"
    default: __auto__
    multiple: false
    outputObject: false
    required: true
    columns:
    - Name
    - Owner
    model: protection.policy
    group: Clone protection
    dependencies:
    - name: clone_protect_and_not_refresh
      values:
        - true          

  - type: expression
    name: protection_volumeuuid
    expression: fn.fnRestBasic('get','https://$(replication_cluster)/api/storage/volumes?svm.name=$(replication_svm_target)&name=$(replication_vol)&fields=uuid&max_records=500','','ONTAP','.records[]|.uuid','','')
    hide: true   
    noOutput: true
    group: Clone protection
    dependencies:
    - name: clone_protect_and_not_refresh
      values:
        - true

  - type: expression
    name: protection_snapshot
    expression: fn.fnRestBasic('get','https://$(replication_cluster)/api/storage/volumes/$(protection_volumeuuid)/snapshots?name="$(parent_snapshot)"&fields=name','','ONTAP','[.records[]|.name]','','')
    hide: true
    group: Clone protection
    noOutput: true
    dependencies:
    - name: clone_protect_and_not_refresh
      values:
        - true

  - type: expression
    name: validation
    label: Validation
    hide: false
    expression: "($(protection_snapshot).length<1)?'snapshot: $(parent_snapshot) could not be found on parent volume snapmirror destination':'snapshot: $(parent_snapshot) exists on parent volume snapmirror destination'"
    runLocal: true
    noOutput: true
    regex:
      expression: exists
      description: base snapshot could not be found on parent volume snapmirror destination
    group: Clone protection
    dependencies:
    - name: clone_protect_and_not_refresh
      values:
        - true         

  - type: expression
    name: clone_snapmirrors
    dbConfig:
      name: AIQUMSQL
      type: mysql
    hide: true
    noOutput: true
    query: SELECT cluster_src.name as src_cluster_name, vserver_src.name as src_vserver_name, volume_src.name as src_volume_name, cluster_dst.name as dst_cluster_name, 
            vserver_dst.name as dst_vserver_name, volume_dst.name as dst_volume_name, snap_mirror.mirrorStateRaw AS mirror_state, 
            mirror_policy.name AS mirror_policy, schedule.name as schedule,
            CASE WHEN snap_mirror.isHealthy=1 THEN 'Yes' ELSE 'No' END AS mirror_health FROM netapp_model_view.snap_mirror
            INNER JOIN netapp_model_view.cluster cluster_src ON snap_mirror.sourceClusterId = cluster_src.objId 
            INNER JOIN netapp_model_view.vserver vserver_src ON snap_mirror.sourceVserverId = vserver_src.objId 
            INNER JOIN netapp_model_view.volume volume_src ON snap_mirror.sourceVolumeId  = volume_src.objId 
            INNER JOIN netapp_model_view.cluster cluster_dst ON snap_mirror.destinationClusterId = cluster_dst.objId 
            INNER JOIN netapp_model_view.vserver vserver_dst ON snap_mirror.destinationVserverId = vserver_dst.objId 
            INNER JOIN netapp_model_view.volume volume_dst ON snap_mirror.destinationVolumeId  = volume_dst.objId 
            LEFT JOIN  netapp_model_view.snap_mirror_policy mirror_policy ON snap_mirror.snapMirrorPolicyId  = mirror_policy.objId 
            LEFT JOIN  netapp_model_view.job_schedule schedule ON snap_mirror.jobScheduleId  = schedule.objId  
            WHERE (cluster_src.name = '$(cluster)' AND vserver_src.name='$(existingclones.svm)' AND volume_src.name = '$(existingclones.volume)')
              and snap_mirror.mirrorStateRaw = 'snapmirrored'
    group: Clone protection
    dependencies:
    - name: clone_protect_and_refresh
      values:
      - true

  - type: query
    name: clone_snapmirrors_query
    label: Select existing clone protection relationship
    expression: fn.fnJq($(clone_snapmirrors),'[.[]|{Relationship:(.dst_cluster_name+":"+.dst_vserver_name+":"+.dst_volume_name)}+{cluster:.dst_cluster_name}+{Policy:.mirror_policy}+{Schedule:(if .schedule then .schedule else "" end)}+{svm:.dst_vserver_name}+{volume:.dst_volume_name}]')
    default: __auto__
    multiple: false
    noOutput: true
    required: true
    columns:
    - Relationship
    - Policy
    - Schedule
    group: Clone protection
    dependencies:
    - name: clone_protect_and_refresh
      values:
      - true         

  - type: expression
    name: protection_cluster_refresh
    expression: "'$(clone_snapmirrors_query.cluster)'"
    hide: true
    model: protection.cluster
    group: Clone protection
    dependencies:
    - name: clone_protect_and_refresh
      values:
        - true

  - type: expression
    name: protection_svm_refresh
    expression: "'$(clone_snapmirrors_query.svm)'"
    hide: true
    model: protection.svm
    group: Clone protection
    dependencies:
    - name: clone_protect_and_refresh
      values:
        - true

  - type: expression
    name: protection_volume_refresh
    expression: "'$(clone_snapmirrors_query.volume)'"
    hide: true
    model: protection.volume
    group: Clone protection
    dependencies:
    - name: clone_protect_and_refresh
      values:
        - true

  - type: expression
    name: protection_policy_refresh
    expression: "'$(clone_snapmirrors_query.Policy)'"
    hide: true
    model: protection.policy
    group: Clone protection
    dependencies:
    - name: clone_protect_and_refresh
      values:
        - true         

  - type: expression
    name: protection_schedule_refresh
    expression: "'$(clone_snapmirrors_query.Schedule)'"
    hide: true
    model: protection.schedule
    group: Clone protection
    dependencies:
    - name: clone_protect_and_refresh
      values:
        - true         

  - type: expression
    name: protection_clone
    expression: "fn.fnRestBasic('get','https://$(protection_cluster_refresh)/api/storage/volumes?svm.name=$(protection_svm_refresh)&name=$(protection_volume_refresh)&fields=comment,clone.is_flexclone,clone.parent_volume,clone.parent_svm,clone.parent_snapshot,svm.name,create_time&max_records=1000','','ONTAP','[.records[]| {\"clone_splited\":(if(.comment|contains(\"CLONENAME\"))and(.clone.is_flexclone==false) then true else false end)} + {svm: .svm.name} + {volume: .name} + {clone: .clone.is_flexclone} + {\"creation_time\": .create_time} + {\"clone_parent\": (if(.comment|contains(\"CLONENAME\"))and(.clone.is_flexclone==false) then (.comment|match(\"PARENTVOL:([^,]*)\").captures[0].string) else .clone.parent_volume.name end)} + {\"clone_parent_svm\": (if(.comment|contains(\"CLONENAME\"))and(.clone.is_flexclone==false) then (.comment|match(\"PARENTSVM:([^,]*)\").captures[0].string) else .clone.parent_svm.name end)} + {\"clone_parent_snapshot\": (if(.comment|contains(\"CLONENAME\"))and(.clone.is_flexclone==false) then (.comment|match(\"SNAP:([^,]*)\").captures[0].string) else .clone.parent_snapshot.name end)}]|map(select (.clone or .\"clone_splited\"))|.[]','','')"
    hide: true
    noOutput: true
    group: Clone protection
    dependencies:
    - name: clone_protect_and_refresh
      values:
        - true

  - type: expression
    name: protection_basesvm
    expression: fn.fnJq($(protection_clone),'.clone_parent_svm')
    hide: true
    model: protection.basesvm
    group: Clone protection
    dependencies:
    - name: clone_protect_and_refresh
      values:
        - true          

  - type: expression
    name: protection_basevol
    expression: fn.fnJq($(protection_clone),'.clone_parent')
    hide: true
    model: protection.basevol
    group: Clone protection
    dependencies:
    - name: clone_protect_and_refresh
      values:
        - true          



  - type: expression
    name: protection_volumeuuid_refresh
    expression: fn.fnRestBasic('get','https://$(protection_cluster_refresh)/api/storage/volumes?svm.name=$(protection_basesvm)&name=$(protection_basevol)&fields=uuid&max_records=500','','ONTAP','.records[]|.uuid','','')
    hide: true   
    noOutput: true
    group: Clone protection
    dependencies:
    - name: clone_protect_and_refresh
      values:
        - true

  - type: expression
    name: protection_snapshot_refresh
    expression: fn.fnRestBasic('get','https://$(protection_cluster_refresh)/api/storage/volumes/$(protection_volumeuuid_refresh)/snapshots?name="$(parent_snapshot)"&fields=name','','ONTAP','[.records[]|.name]','','')
    hide: true
    group: Clone protection
    noOutput: true
    dependencies:
    - name: clone_protect_and_refresh
      values:
        - true

  - type: expression
    name: validation_refresh
    label: Validation
    hide: false
    expression: "($(protection_snapshot_refresh).length<1)?'snapshot: $(parent_snapshot) could not be found on parent volume snapmirror destination':'snapshot: $(parent_snapshot) exists on parent volume snapmirror destination'"
    runLocal: true
    noOutput: true
    regex:
      expression: exists
      description: base snapshot could not be found on parent volume snapmirror destination
    group: Clone protection
    dependencies:
    - name: clone_protect_and_refresh
      values:
        - true         