name: Decommission Existing Service Volume
help: This is used to decommission volume. Selected volumes will be renamed and
  taken offline
roles:
  - Provision
description: Decommission existing volume
categories:
  - Decommission
playbook: decommission_service_vol.yaml
inventory: hosts
type: ansible
tileClass: has-background-danger-light
icon: trash
fields:
  - type: expression
    name: settings
    label: settings
    expression: fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','')
    noOutput: true
    hide: true
  - type: expression
    name: aiqum
    expression: fn.fnJq($(settings),'.general.aiqum')
    label: aiqum
    hide: true
    noOutput: true
  - type: expression
    name: aiqumlogin
    label: aiqumlogin
    expression: "'AIQUM'"
    asCredential: true
    hide: true
  - type: expression
    name: datasource_info
    label: datasource_info
    expression: fn.fnRestBasic('get','https://$(aiqum)/api/admin/datasources/clusters','','AIQUM','[.records[]|{name:.name}+{key:.key}]','','')
    hide: true
    noOutput: true    
  - type: expression
    name: login
    expression: "'ONTAP'"
    label: login
    asCredential: true
    hide: true
  - type: query
    name: selectedvolume
    label: Select Production Volume
    dbConfig:
      name: AIQUMSQL
      type: mysql
    query: select CONCAT(cluster.name,':',vserver.name,':',volume.name) as
      'Cluster:SVM:Volume',
      CONCAT(format(round(volume.size/1024/1024/1024,0),'T0'),'G') as Size,
      round(volume.size/1024/1024/1024,0) as sizeg,
      CONCAT(format(round(volume.sizeUsed/1024/1024/1024,0),'T0'),'G') as Used,
      volume.sizeUsed/volume.size as Utilization, cluster.name as cluster,
      vserver.name as svm, volume.name as volume from netapp_model_view.cluster,
      netapp_model_view.vserver, netapp_model_view.volume where volume.vserverid
      = vserver.objid and vserver.clusterid = cluster.objid and volume.state =
      'ONLINE' and volume.isVserverRoot = 0 and volume.derivedStyle != 'CONSTITUENT' and volume.volType='RW' and
      vserver.type='DATA' and vserver.subtype='DEFAULT' order by volume.name
    columns:
      - Cluster:SVM:Volume
      - Size
      - Used
      - Utilization
    pctColumns:
      - Utilization
    required: true
    default: __auto__
    outputObject: true
    noOutput: true
  - type: expression
    name: cluster
    label: cluster
    expression: "'$(selectedvolume.cluster)'"
    hide: true
    model: prod.cluster
  - type: expression
    name: cluster_key
    label: cluster_key
    expression: fn.fnJq($(datasource_info),'.[]|select(.name=="$(cluster)")|.key')
    hide: true
    group: Production
    model: prod.clusterkey
  - type: expression
    name: svm
    label: svm
    expression: "'$(selectedvolume.svm)'"
    hide: true
    model: prod.svm
  - type: expression
    name: volname
    label: volname
    expression: "'$(selectedvolume.volume)'"
    hide: true
    model: prod.volume
  - type: number
    name: offline_period_days
    label: Decomission days until delete
    help: Decomissioned volumes will be kept offline for the specified number of days
    default: 10
    required: true
    minValue: 0
    maxValue: 20
    icon: user
    noOutput: true
  - type: expression
    name: vol_suffix
    label: vol_suffix
    expression: "'_to_be_deleted_after_'+(new
      Date(Date.now()+86400000*$(offline_period_days))).getDate()+'_'
      +((new Date(Date.now()+86400000*$(offline_period_days))).toLocaleString('default',{month:'short'}))+'_'
      +(new Date(Date.now()+86400000*$(offline_period_days))).getFullYear()"
    runLocal: true
    hide: true
    noOutput: true
  - type: expression
    name: offline_period_time
    label: "Volumes can be deleted after:"
    expression: "'$(volname)'!=''?(new
      Date(Date.now()+86400000*$(offline_period_days))).getDate()+' '+((new
      Date(Date.now()+86400000*$(offline_period_days))).toLocaleString('default\
      ',{month:'short'}))+' '+(new
      Date(Date.now()+86400000*$(offline_period_days))).getFullYear():''"
    runLocal: true
    hide: false
    noOutput: true
  - type: checkbox
    name: areyousure
    label: Confirmation
    default: false
    placeholder: Are you sure you want to decommission the volume (volume will be taken offline) ?
    required: true
  - type: text
    name: confirmation
    label: Please type YES to confirm you want to delete
    placeholder: "YES" 
    required: true
    minLength: 1
    maxLength: 3
    regex:
      expression: ^YES$
      description: Type YES to confirm
    dependencies:         
    - name: areyousure
      values:
      - true  
  - type: expression
    name: suffixed_volname
    label: suffixed_volname
    expression: "'$(volname)'+'$(vol_suffix)'"
    runLocal: true
    hide: true
    model: prod.suffixed_volume
  - type: expression
    name: flat_service_info
    label: flat_service_info
    expression: "fn.fnJq($(settings),'.services | [leaf_paths as $path | {\"key\":
      $path | join(\"^\"), \"value\": getpath($path)}]')"
    hide: true
    noOutput: true
  - type: expression
    name: prod_service_info
    label: prod_service_info
    expression: fn.fnJq($(flat_service_info),'.|from_entries|with_entries(
      select(.key|contains("^prod^clusters^$(cluster)")))|with_entries(
      select(.value == ("$(svm)")))')
    hide: true
    noOutput: true
  - type: expression
    name: prod_svm_match_arr
    label: prod_svm_match_arr
    expression: fn.fnJq($(prod_service_info),'[.[]]')
    hide: true
    noOutput: true
  - type: expression
    name: prod_svm_count
    label: prod_svm_count
    expression: "([...new Set($(prod_svm_match_arr))]).length"
    runLocal: true
    hide: true
    noOutput: true
  - type: expression
    name: service
    label: Service
    expression: $(prod_svm_count)==1?Object.keys($(prod_service_info))[0].split('^')[0]:''
    runLocal: true
    hide: true
    noOutput: false
    model: general.service
  - type: expression
    name: company
    label: Company
    expression: $(prod_svm_count)==1?Object.keys($(prod_service_info))[0].split('^')[1]:''
    runLocal: true
    hide: true
    noOutput: false
    model: general.company
  - type: expression
    name: environment
    label: Environment
    expression: $(prod_svm_count)==1?Object.keys($(prod_service_info))[0].split('^')[2]:''
    runLocal: true
    hide: true
    noOutput: false
    model: general.environment
  - type: expression
    name: location
    label: Location
    expression: $(prod_svm_count)==1?Object.keys($(prod_service_info))[0].split('^')[3]:''
    runLocal: true
    hide: true
    noOutput: false
    model: general.location
  - type: expression
    name: volume2servicestatus
    label: Volume to Service Mapping
    hide: false
    expression: "$(prod_svm_count)>1?'Containing SVM is configured for more than one
      service':$(prod_svm_count)<1?'Containing SVM is not configured for a
      service': '<p class=\"has-text-success\">SERVICE:&nbsp</p> $(service) &nbsp;<p
      class=\"has-text-success\">COMPANY:&nbsp</p>$(company)&nbsp; <p
      class=\"has-text-success\">ENVIRONMENT:&nbsp</p>$(environment)&nbsp;<p
      class=\"has-text-success\">LOCATION:&nbsp</p>$(location)'"
    runLocal: true
    noOutput: true
    isHtml: true
  - type: expression
    name: volume_comment
    label: volume_comment
    expression: fn.fnRestBasic('get','https://$(cluster)/api/storage/volumes?fields=comment&svm.name=$(svm)&name=$(volname)','','ONTAP','.records[]|.comment','','')
    hide: true
  - type: expression
    name: cr
    label: cr
    expression: "('$(volume_comment)').includes('CR:')?('$(volume_comment)').match(/CR:\"([^\"]*)\".*/)[1]:''"
    runLocal: true 
    hide: true
    noOutput: true
  - type: expression
    name: application
    label: application
    expression: "('$(volume_comment)').includes('APPLICATION:')?('$(volume_comment)').match(/APPLICATION:\"([^\"]*)\".*/)[1]:''"
    runLocal: true 
    hide: true
    noOutput: true               
  - type: expression
    name: used_for
    label: used_for
    expression: "('$(volume_comment)').includes('USEDFOR:')?('$(volume_comment)').match(/USEDFOR:\"([^\"]*)\".*/)[1]:''"
    runLocal: true 
    hide: true
    noOutput: true
  - type: expression
    name: owner
    label: owner
    expression: "('$(volume_comment)').includes('OWNER:')?('$(volume_comment)').match(/OWNER:\"([^\"]*)\".*/)[1]:''"
    runLocal: true 
    hide: true
    noOutput: true              
  - type: expression
    name: comment
    label: comment
    expression: "('$(volume_comment)').includes('COMMENT:')?('$(volume_comment)').match(/COMMENT:\"([^\"]*)\".*/)[1]:''"
    runLocal: true 
    hide: true
    noOutput: true
  - type: expression
    name: volumeinfo
    label: Volume Informaton
    hide: false
    expression: "('$(volume_comment)').includes('CR:')? 
                  '<p class=\"has-text-success\">Change Request:&nbsp</p> $(cr) &nbsp;
                  <p class=\"has-text-success\">Application:&nbsp</p>$(application)&nbsp; 
                  <p class=\"has-text-success\">Used For:&nbsp</p>$(used_for)&nbsp;
                  <p class=\"has-text-success\">Owner:&nbsp</p>$(owner)&nbsp;
                  <p class=\"has-text-success\">Comment:&nbsp</p>$(comment)':
                  'Information is not available'"
    runLocal: true
    noOutput: true
    isHtml: true
  - type: expression
    name: currvolsize
    label: Selected Volume Used (G)
    expression: "'$(selectedvolume.Used)'"
    runLocal: true
    hide: false
    noOutput: true
  - type: expression
    name: copy_types_jq
    label: copy_types_jq
    hide: true
    expression: fn.fnJq($(settings),'.services|."$(service)"|."$(company)"|."$(environment)"|."$(location)"|keys')
    noOutput: true
  - type: expression
    name: dr1
    label: dr1
    hide: true
    runLocal: true
    expression: $(copy_types_jq).includes('dr1')
    noOutput: true
  - type: expression
    name: b2d1
    label: b2d1
    hide: true
    runLocal: true
    expression: $(copy_types_jq).includes('b2d1')
    noOutput: true    
  - type: expression
    name: dr2
    label: dr2
    hide: true
    runLocal: true
    expression: $(copy_types_jq).includes('dr2')
    noOutput: true
  - type: expression
    name: b2d2
    label: b2d2
    hide: true
    runLocal: true
    expression: $(copy_types_jq).includes('b2d2')
    noOutput: true
  - type: expression
    name: dr1_cluster
    label: dr1_cluster
    expression: fn.fnJq($(flat_service_info),'.|from_entries|with_entries(select(.key|contains("$(service)^$(company)^$(environment)^$(location)^dr1^fixed_relationship_for_prod^$(cluster)_$(svm)^cluster")))[]')
    hide: true
    noOutput: false
    model: dr1.cluster
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_cluster_key
    label: dr1_cluster_key
    expression: fn.fnJq($(datasource_info),'.[]|select(.name=="$(dr1_cluster)")|.key')
    hide: true
    group: DR1
    model: dr1.clusterkey
    dependencies:
      - name: dr1
        values:
          - true           
  - type: expression
    name: dr1_svm
    label: dr1_svm
    expression: fn.fnJq($(flat_service_info),'.|from_entries|with_entries(select(.key|contains("$(service)^$(company)^$(environment)^$(location)^dr1^fixed_relationship_for_prod^$(cluster)_$(svm)^svm")))[]')
    hide: true
    noOutput: false
    model: dr1.svm
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_source_copy
    label: dr1_source_copy
    expression: fn.fnJq($(flat_service_info),'.|from_entries|with_entries(select(.key|contains("$(service)^$(company)^$(environment)^$(location)^dr1^source^copy")))[]')
    noOutput: true
    hide: true
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_source_cluster
    label: dr1_source_cluster
    expression: "'$(dr1_source_copy)'=='prod'?'$(cluster)':''"
    runLocal: true
    hide: true
    model: dr1.source_cluster
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_source_svm
    label: dr1_source_svm
    expression: "'$(dr1_source_copy)'=='prod'?'$(svm)':''"
    runLocal: true
    hide: true
    model: dr1.source_svm
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_source_vol
    label: dr1_source_vol
    expression: "'$(dr1_source_copy)'=='prod'?'$(volname)':''"
    runLocal: true
    hide: true
    model: dr1.source_vol
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_relationship
    label: dr1_relationship
    dbConfig:
      name: AIQUMSQL
      type: mysql
    hide: true
    noOutput: true
    default: []
    query: SELECT cluster_src.name as src_cluster_name, vserver_src.name as
      src_vserver_name, volume_src.name as src_volume_name, cluster_dst.name as
      dst_cluster_name, vserver_dst.name as dst_vserver_name, volume_dst.name as
      dst_volume_name, snap_mirror.mirrorStateRaw AS mirror_state, CASE WHEN
      snap_mirror.isHealthy=1 THEN 'Yes' ELSE 'No' END AS mirror_health FROM
      netapp_model_view.snap_mirror INNER JOIN netapp_model_view.cluster
      cluster_src ON snap_mirror.sourceClusterId = cluster_src.objId INNER JOIN
      netapp_model_view.vserver vserver_src ON snap_mirror.sourceVserverId =
      vserver_src.objId INNER JOIN netapp_model_view.volume volume_src ON
      snap_mirror.sourceVolumeId  = volume_src.objId INNER JOIN
      netapp_model_view.cluster cluster_dst ON snap_mirror.destinationClusterId
      = cluster_dst.objId INNER JOIN netapp_model_view.vserver vserver_dst ON
      snap_mirror.destinationVserverId = vserver_dst.objId INNER JOIN
      netapp_model_view.volume volume_dst ON snap_mirror.destinationVolumeId  =
      volume_dst.objId WHERE cluster_src.name = '$(dr1_source_cluster)' AND
      vserver_src.name='$(dr1_source_svm)' AND volume_src.name =
      '$(dr1_source_vol)' AND cluster_dst.name = '$(dr1_cluster)' AND
      vserver_dst.name = '$(dr1_svm)'
  - type: expression
    name: dr1_volname
    label: dr1_volname
    expression: ($(dr1_relationship))[0]["dst_volume_name"]
    runLocal: true
    hide: true
    model: dr1.volume
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_suffixed_volname
    label: dr1_suffixed_volname
    expression: "'$(dr1_volname)'+'$(vol_suffix)'"
    runLocal: true
    hide: true
    model: dr1.suffixed_volume
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_mirror_state
    label: dr1_mirror_state
    expression: ($(dr1_relationship))[0]['mirror_state']
    runLocal: true
    hide: true
    noOutput: true
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_mirror_health
    label: dr1_mirror_health
    expression: ($(dr1_relationship))[0]['mirror_health']
    runLocal: true
    hide: true
    noOutput: true
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: dr1_volume_information
    label: DR1
    hide: false
    expression: "'$(dr1_volname)'==''?'could not identify dr1 volume': '<p
      class=\"has-text-success\">SOURCE:&nbsp</p>$(dr1_source_copy)&nbsp;<p
      class=\"has-text-success\">CLUSTER:&nbsp</p>$(dr1_cluster)&nbsp; <p
      class=\"has-text-success\">SVM:&nbsp</p>$(dr1_svm)&nbsp;<p
      class=\"has-text-success\">VOLUME:&nbsp</p>$(dr1_volname)&nbsp; <p
      class=\"has-text-success\">STATE:&nbsp</p>$(dr1_mirror_state)&nbsp; <p
      class=\"has-text-success\">HEALTHY:&nbsp</p>$(dr1_mirror_health)&nbsp;'"
    runLocal: true
    noOutput: true
    isHtml: true
    dependencies:
      - name: dr1
        values:
          - true
  - type: expression
    name: b2d1_cluster
    label: b2d1_cluster
    expression: fn.fnJq($(flat_service_info),'.|from_entries|with_entries(select(.key|contains("$(service)^$(company)^$(environment)^$(location)^b2d1^fixed_relationship_for_prod^$(cluster)_$(svm)^cluster")))[]')
    hide: true
    noOutput: false
    model: b2d1.cluster
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_cluster_key
    label: b2d1_cluster_key
    expression: fn.fnJq($(datasource_info),'.[]|select(.name=="$(b2d1_cluster)")|.key')
    hide: true
    group: B2D1
    model: b2d1.clusterkey
    dependencies:
      - name: b2d1
        values:
          - true            
  - type: expression
    name: b2d1_svm
    label: b2d1_svm
    expression: fn.fnJq($(flat_service_info),'.|from_entries|with_entries(select(.key|contains("$(service)^$(company)^$(environment)^$(location)^b2d1^fixed_relationship_for_prod^$(cluster)_$(svm)^svm")))[]')
    hide: true
    noOutput: false
    model: b2d1.svm
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_source_copy
    label: b2d1_source_copy
    expression: fn.fnJq($(flat_service_info),'.|from_entries|with_entries(select(.key|contains("$(service)^$(company)^$(environment)^$(location)^b2d1^source^copy")))[]')
    noOutput: true
    hide: true
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_source_cluster
    label: b2d1_source_cluster
    expression: "'$(b2d1_source_copy)'=='prod'?'$(cluster)':'$(b2d1_source_copy)'=='dr1'?$(dr1_relationship)[0][\"dst_cluster_name\"]:''"
    runLocal: true
    hide: true
    model: b2d1.source_cluster
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_source_svm
    label: b2d1_source_svm
    expression: "'$(b2d1_source_copy)'=='prod'?'$(svm)':'$(b2d1_source_copy)'=='dr1'?$(dr1_relationship)[0][\"dst_vserver_name\"]:''"
    runLocal: true
    hide: true
    model: b2d1.source_svm
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_source_vol
    label: b2d1_source_vol
    expression: "'$(b2d1_source_copy)'=='prod'?'$(volname)':'$(b2d1_source_copy)'=='dr1'?$(dr1_relationship)[0][\"dst_volume_name\"]:''"
    runLocal: true
    hide: true
    model: b2d1.source_vol
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_relationship
    label: b2d1_relationship
    dbConfig:
      name: AIQUMSQL
      type: mysql
    hide: true
    noOutput: true
    default: []
    query: SELECT cluster_src.name as src_cluster_name, vserver_src.name as
      src_vserver_name, volume_src.name as src_volume_name, cluster_dst.name as
      dst_cluster_name, vserver_dst.name as dst_vserver_name, volume_dst.name as
      dst_volume_name, snap_mirror.mirrorStateRaw AS mirror_state, CASE WHEN
      snap_mirror.isHealthy=1 THEN 'Yes' ELSE 'No' END AS mirror_health FROM
      netapp_model_view.snap_mirror INNER JOIN netapp_model_view.cluster
      cluster_src ON snap_mirror.sourceClusterId = cluster_src.objId INNER JOIN
      netapp_model_view.vserver vserver_src ON snap_mirror.sourceVserverId =
      vserver_src.objId INNER JOIN netapp_model_view.volume volume_src ON
      snap_mirror.sourceVolumeId  = volume_src.objId INNER JOIN
      netapp_model_view.cluster cluster_dst ON snap_mirror.destinationClusterId
      = cluster_dst.objId INNER JOIN netapp_model_view.vserver vserver_dst ON
      snap_mirror.destinationVserverId = vserver_dst.objId INNER JOIN
      netapp_model_view.volume volume_dst ON snap_mirror.destinationVolumeId  =
      volume_dst.objId WHERE cluster_src.name = '$(b2d1_source_cluster)' AND
      vserver_src.name='$(b2d1_source_svm)' AND volume_src.name =
      '$(b2d1_source_vol)' AND cluster_dst.name = '$(b2d1_cluster)' AND
      vserver_dst.name = '$(b2d1_svm)'
  - type: expression
    name: b2d1_volname
    label: b2d1_volname
    expression: $(b2d1_relationship)[0]["dst_volume_name"]
    runLocal: true
    hide: true
    model: b2d1.volume
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_suffixed_volname
    label: b2d1_suffixed_volname
    expression: "'$(b2d1_volname)'+'$(vol_suffix)'"
    runLocal: true
    hide: true
    model: b2d1.suffixed_volume
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_mirror_state
    label: b2d1_mirror_state
    expression: ($(b2d1_relationship))[0]['mirror_state']
    runLocal: true
    hide: true
    noOutput: true
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_mirror_health
    label: b2d1_mirror_health
    expression: ($(b2d1_relationship))[0]['mirror_health']
    runLocal: true
    hide: true
    noOutput: true
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: b2d1_volume_information
    label: B2D1
    hide: false
    expression: "'$(b2d1_volname)'==''?'could not identify b2d1 volume': '<p
      class=\"has-text-success\">SOURCE:&nbsp</p>$(b2d1_source_copy)&nbsp;<p
      class=\"has-text-success\">CLUSTER:&nbsp</p>$(b2d1_cluster)&nbsp; <p
      class=\"has-text-success\">SVM:&nbsp</p>$(b2d1_svm)&nbsp;<p
      class=\"has-text-success\">VOLUME:&nbsp</p>$(b2d1_volname)&nbsp; <p
      class=\"has-text-success\">STATE:&nbsp</p>$(b2d1_mirror_state)&nbsp; <p
      class=\"has-text-success\">HEALTHY:&nbsp</p>$(b2d1_mirror_health)&nbsp;'"
    runLocal: true
    noOutput: true
    isHtml: true
    dependencies:
      - name: b2d1
        values:
          - true
  - type: expression
    name: dr2_cluster
    label: dr2_cluster
    expression: fn.fnJq($(flat_service_info),'.|from_entries|with_entries(select(.key|contains("$(service)^$(company)^$(environment)^$(location)^dr2^fixed_relationship_for_prod^$(cluster)_$(svm)^cluster")))[]')
    hide: true
    noOutput: false
    model: dr2.cluster
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_cluster_key
    label: dr2_cluster_key
    expression: fn.fnJq($(datasource_info),'.[]|select(.name=="$(dr2_cluster)")|.key')
    hide: true
    group: DR2
    model: dr2.clusterkey
    dependencies:
      - name: dr2
        values:
          - true            
  - type: expression
    name: dr2_svm
    label: dr2_svm
    expression: fn.fnJq($(flat_service_info),'.|from_entries|with_entries(select(.key|contains("$(service)^$(company)^$(environment)^$(location)^dr2^fixed_relationship_for_prod^$(cluster)_$(svm)^svm")))[]')
    hide: true
    noOutput: false
    model: dr2.svm
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_source_copy
    label: dr2_source_copy
    expression: fn.fnJq($(flat_service_info),'.|from_entries|with_entries(select(.key|contains("$(service)^$(company)^$(environment)^$(location)^dr2^source^copy")))[]')
    noOutput: true
    hide: true
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_source_cluster
    label: dr2_source_cluster
    expression: "'$(dr2_source_copy)'=='prod'?'$(cluster)':'$(dr2_source_copy)'=='dr1'?$(dr1_relationship)[0][\"dst_cluster_name\"]:'$(dr2_source_copy)'=='b2d1'?$(b2d1_relationship)[0][\"dst_cluster_name\"]:''"
    runLocal: true
    hide: true
    model: dr2.source_cluster
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_source_svm
    label: dr2_source_svm
    expression: "'$(dr2_source_copy)'=='prod'?'$(svm)':'$(dr2_source_copy)'=='dr1'?$(dr1_relationship)[0][\"dst_vserver_name\"]:'$(dr2_source_copy)'=='b2d1'?$(b2d1_relationship)[0][\"dst_vserver_name\"]:''"
    runLocal: true
    hide: true
    model: dr2.source_svm
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_source_vol
    label: dr2_source_vol
    expression: "'$(dr2_source_copy)'=='prod'?'$(volname)':'$(dr2_source_copy)'=='dr1'?$(dr1_relationship)[0][\"dst_volume_name\"]:'$(dr2_source_copy)'=='b2d1'?$(b2d1_relationship)[0][\"dst_volume_name\"]:''"
    runLocal: true
    hide: true
    model: dr2.source_vol
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_relationship
    label: dr2_relationship
    dbConfig:
      name: AIQUMSQL
      type: mysql
    hide: true
    noOutput: true
    default: []
    query: SELECT cluster_src.name as src_cluster_name, vserver_src.name as
      src_vserver_name, volume_src.name as src_volume_name, cluster_dst.name as
      dst_cluster_name, vserver_dst.name as dst_vserver_name, volume_dst.name as
      dst_volume_name, snap_mirror.mirrorStateRaw AS mirror_state, CASE WHEN
      snap_mirror.isHealthy=1 THEN 'Yes' ELSE 'No' END AS mirror_health FROM
      netapp_model_view.snap_mirror INNER JOIN netapp_model_view.cluster
      cluster_src ON snap_mirror.sourceClusterId = cluster_src.objId INNER JOIN
      netapp_model_view.vserver vserver_src ON snap_mirror.sourceVserverId =
      vserver_src.objId INNER JOIN netapp_model_view.volume volume_src ON
      snap_mirror.sourceVolumeId  = volume_src.objId INNER JOIN
      netapp_model_view.cluster cluster_dst ON snap_mirror.destinationClusterId
      = cluster_dst.objId INNER JOIN netapp_model_view.vserver vserver_dst ON
      snap_mirror.destinationVserverId = vserver_dst.objId INNER JOIN
      netapp_model_view.volume volume_dst ON snap_mirror.destinationVolumeId  =
      volume_dst.objId WHERE cluster_src.name = '$(dr2_source_cluster)' AND
      vserver_src.name='$(dr2_source_svm)' AND volume_src.name =
      '$(dr2_source_vol)' AND cluster_dst.name = '$(dr2_cluster)' AND
      vserver_dst.name = '$(dr2_svm)'
  - type: expression
    name: dr2_volname
    label: dr2_volname
    expression: $(dr2_relationship)[0]["dst_volume_name"]
    runLocal: true
    hide: true
    model: dr2.volume
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_suffixed_volname
    label: dr2_suffixed_volname
    expression: "'$(dr2_volname)'+'$(vol_suffix)'"
    runLocal: true
    hide: true
    model: dr2.suffixed_volume
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_mirror_state
    label: dr2_mirror_state
    expression: ($(dr2_relationship))[0]['mirror_state']
    runLocal: true
    hide: true
    noOutput: true
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_mirror_health
    label: dr2_mirror_health
    expression: ($(dr2_relationship))[0]['mirror_health']
    runLocal: true
    hide: true
    noOutput: true
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: dr2_volume_information
    label: DR2
    hide: false
    expression: "'$(dr2_volname)'==''?'could not identify dr2 volume': '<p
      class=\"has-text-success\">SOURCE:&nbsp</p>$(dr2_source_copy)&nbsp;<p
      class=\"has-text-success\">CLUSTER:&nbsp</p>$(dr2_cluster)&nbsp; <p
      class=\"has-text-success\">SVM:&nbsp</p>$(dr2_svm)&nbsp;<p
      class=\"has-text-success\">VOLUME:&nbsp</p>$(dr2_volname)&nbsp; <p
      class=\"has-text-success\">STATE:&nbsp</p>$(dr2_mirror_state)&nbsp; <p
      class=\"has-text-success\">HEALTHY:&nbsp</p>$(dr2_mirror_health)&nbsp;'"
    runLocal: true
    noOutput: true
    isHtml: true
    dependencies:
      - name: dr2
        values:
          - true
  - type: expression
    name: b2d2_cluster
    label: b2d2_cluster
    expression: fn.fnJq($(flat_service_info),'.|from_entries|with_entries(select(.key|contains("$(service)^$(company)^$(environment)^$(location)^b2d2^fixed_relationship_for_prod^$(cluster)_$(svm)^cluster")))[]')
    hide: true
    noOutput: false
    model: b2d2.cluster
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_cluster_key
    label: b2d2_cluster_key
    expression: fn.fnJq($(datasource_info),'.[]|select(.name=="$(b2d2_cluster)")|.key')
    hide: true
    group: B2D2
    model: b2d2.clusterkey
    dependencies:
      - name: b2d2
        values:
          - true            
  - type: expression
    name: b2d2_svm
    label: b2d2_svm
    expression: fn.fnJq($(flat_service_info),'.|from_entries|with_entries(select(.key|contains("$(service)^$(company)^$(environment)^$(location)^b2d2^fixed_relationship_for_prod^$(cluster)_$(svm)^svm")))[]')
    hide: true
    noOutput: false
    model: b2d2.svm
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_source_copy
    label: b2d2_source_copy
    expression: fn.fnJq($(flat_service_info),'.|from_entries|with_entries(select(.key|contains("$(service)^$(company)^$(environment)^$(location)^b2d2^source^copy")))[]')
    noOutput: true
    hide: true
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_source_cluster
    label: b2d2_source_cluster
    expression: "'$(b2d2_source_copy)'=='prod'?'$(cluster)':'$(b2d2_source_copy)'==\
      'dr1'?$(dr1_relationship)[0][\"dst_cluster_name\"]:'$(b2d2_source_copy)'=\
      ='dr2'?$(dr2_relationship)[0][\"dst_cluster_name\"]:'$(b2d2_source_copy)'\
      =='b2d1'?$(b2d1_relationship)[0][\"dst_cluster_name\"]:''"
    runLocal: true
    hide: true
    model: b2d2.source_cluster
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_source_svm
    label: b2d2_source_svm
    expression: "'$(b2d2_source_copy)'=='prod'?'$(svm)':'$(b2d2_source_copy)'=='dr1\
      '?$(dr1_relationship)[0][\"dst_vserver_name\"]:'$(b2d2_source_copy)'=='dr\
      2'?$(dr2_relationship)[0][\"dst_vserver_name\"]:'$(b2d2_source_copy)'=='b\
      2d1'?$(b2d1_relationship)[0][\"dst_vserver_name\"]:''"
    runLocal: true
    hide: true
    model: b2d2.source_svm
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_source_vol
    label: b2d2_source_vol
    expression: "'$(b2d2_source_copy)'=='prod'?'$(volname)':'$(b2d2_source_copy)'==\
      'dr1'?$(dr1_relationship)[0][\"dst_volume_name\"]:'$(b2d2_source_copy)'==\
      'dr2'?$(dr2_relationship)[0][\"dst_volume_name\"]:'$(b2d2_source_copy)'==\
      'b2d1'?$(b2d1_relationship)[0][\"dst_volume_name\"]:''"
    runLocal: true
    hide: true
    model: b2d2.source_vol
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_relationship
    label: b2d2_relationship
    dbConfig:
      name: AIQUMSQL
      type: mysql
    hide: true
    noOutput: true
    default: []
    query: SELECT cluster_src.name as src_cluster_name, vserver_src.name as
      src_vserver_name, volume_src.name as src_volume_name, cluster_dst.name as
      dst_cluster_name, vserver_dst.name as dst_vserver_name, volume_dst.name as
      dst_volume_name, snap_mirror.mirrorStateRaw AS mirror_state, CASE WHEN
      snap_mirror.isHealthy=1 THEN 'Yes' ELSE 'No' END AS mirror_health FROM
      netapp_model_view.snap_mirror INNER JOIN netapp_model_view.cluster
      cluster_src ON snap_mirror.sourceClusterId = cluster_src.objId INNER JOIN
      netapp_model_view.vserver vserver_src ON snap_mirror.sourceVserverId =
      vserver_src.objId INNER JOIN netapp_model_view.volume volume_src ON
      snap_mirror.sourceVolumeId  = volume_src.objId INNER JOIN
      netapp_model_view.cluster cluster_dst ON snap_mirror.destinationClusterId
      = cluster_dst.objId INNER JOIN netapp_model_view.vserver vserver_dst ON
      snap_mirror.destinationVserverId = vserver_dst.objId INNER JOIN
      netapp_model_view.volume volume_dst ON snap_mirror.destinationVolumeId  =
      volume_dst.objId WHERE cluster_src.name = '$(b2d2_source_cluster)' AND
      vserver_src.name='$(b2d2_source_svm)' AND volume_src.name =
      '$(b2d2_source_vol)' AND cluster_dst.name = '$(b2d2_cluster)' AND
      vserver_dst.name = '$(b2d2_svm)'
  - type: expression
    name: b2d2_volname
    label: b2d2_volname
    expression: $(b2d2_relationship)[0]["dst_volume_name"]
    runLocal: true
    hide: true
    model: b2d2.volume
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_suffixed_volname
    label: b2d2_suffixed_volname
    expression: "'$(b2d2_volname)'+'$(vol_suffix)'"
    runLocal: true
    hide: true
    model: b2d2.suffixed_volume
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_mirror_state
    label: b2d2_mirror_state
    expression: ($(b2d2_relationship))[0]['mirror_state']
    runLocal: true
    hide: true
    noOutput: true
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_mirror_health
    label: b2d2_mirror_health
    expression: ($(b2d2_relationship))[0]['mirror_health']
    runLocal: true
    hide: true
    noOutput: true
    dependencies:
      - name: b2d2
        values:
          - true
  - type: expression
    name: b2d2_volume_information
    label: B2D2
    hide: false
    expression: "'$(b2d2_volname)'==''?'could not identify b2d2 volume': '<p
      class=\"has-text-success\">SOURCE:&nbsp</p>$(b2d2_source_copy)&nbsp;<p
      class=\"has-text-success\">CLUSTER:&nbsp</p>$(b2d2_cluster)&nbsp; <p
      class=\"has-text-success\">SVM:&nbsp</p>$(b2d2_svm)&nbsp;<p
      class=\"has-text-success\">VOLUME:&nbsp</p>$(b2d2_volname)&nbsp; <p
      class=\"has-text-success\">STATE:&nbsp</p>$(b2d2_mirror_state)&nbsp; <p
      class=\"has-text-success\">HEALTHY:&nbsp</p>$(b2d2_mirror_health)&nbsp;'"
    runLocal: true
    noOutput: true
    isHtml: true
    dependencies:
      - name: b2d2
        values:
          - true
source: decommission_volume.yaml
