categories:
  - name: Default
    icon: bars
  - name: Provision
    icon: bath  
  - name: Maintenance
    icon: bath             
roles:
  - name: admin
    groups:
      - local/admins
      - ldap/Domain Admins
  - name: operator
    groups:
      - local/operator
  - name: demo
    groups:
      - local/demo
  - name: public
    groups: []
  - name: Provision
    groups:
      - local/Provision Admins  
forms:

  - name: Create New Volume For Service
    help:
      This is used to create new volume for a service  
    roles:
      - Provision
    description: New volume creation
    categories:
      - Provision
    icon: scroll
    playbook: create_service_vol.yaml
    inventory: hosts
    type: ansible
    fields:
    
      ############################################################################################################################
      # environment General configuration
      ############################################################################################################################    

      - type: expression
        name: settings
        label: settings
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','')"
        noOutput: true 
        hide: true

      #aiqum server 
      - type: expression
        name: aiqum
        expression: "fn.fnJq($(settings),'.general.aiqum')" 
        label: aiqum
        hide: true 
        noOutput: true

      #ontap credentials to use in ansible 
      - type: expression         # readonly
        name: login
        expression: "'ONTAP'" 
        label: login
        asCredential: true
        hide: true    


      ############################################################################################################################
      # filter service, environment, company, location
      ############################################################################################################################

      - type: query
        name: service
        label: Service
        expression: "fn.fnJq($(settings),'.services|keys')"
        required: true
        default: __auto__
        model: general.service

      - type: query
        name: company
        label: Company
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|keys')"
        required: true
        default: __auto__
        model: general.company

      - type: query
        name: environment
        label: Environment
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|keys')"
        required: true
        default: __auto__     
        model: general.environment

      - type: query
        name: location
        label: Location
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|keys')"
        required: true
        default: __auto__
        model: general.location

      - type: text
        name: volname
        label: Volume Name
        default: ""
        required: true
        minLength: 1
        maxLength: 30
        regex: 
          expression: ^[a-z0-9_]*$
          description: Invalid volume name         
        notIn:
          field: "existingvols"
          description: Volume already exists           
        icon: user
        #group: Production
        model: prod.volname

      - type: number
        name: volsize
        label: Volume Size (G)
        default: "100"
        required: true
        minValue: 10
        maxValue: 90000
        icon: user
        model: prod.volsize

      - type: enum
        name: secstyle
        label: Security Style
        default: ntfs
        values:
        - ntfs
        - unix
        required: true  
        model: prod.secstyle

      - type: text
        name: exports
        label: Export Hosts
        default: ""
        required: false
        regex:
          expression: ([^,]+)
          description: Invalid volume name 
        model: prod.exports
        icon: user

      - type: number
        name: cr
        label: Change Request
        default: ""
        required: false
        minValue: 0
        maxValue: 9999999999
        icon: user
        noOutput: true

      - type: text
        name: application
        label: Application
        default: ""
        required: false
        minLength: 1
        maxLength: 30
        regex: 
          expression: ^[a-zA-Z0-9א-ת_-\s]*$
          description: Invalid input         
        noOutput: true
        icon: user

      - type: text
        name: usedfor
        label: Used For
        default: ""
        required: false
        minLength: 1
        maxLength: 30
        regex: 
          expression: ^[a-zA-Z0-9א-ת_-\s]*$
          description: Invalid input         
        noOutput: true
        icon: user

      - type: text
        name: unit
        label: Unit
        default: ""
        required: false
        minLength: 1
        maxLength: 30
        regex: 
          expression: ^[a-zA-Z0-9א-ת_-\s]*$
          description: Invalid input         
        noOutput: true
        icon: user        

      - type: text
        name: owner
        label: Owner
        default: ""
        required: false
        minLength: 1
        maxLength: 30
        regex: 
          expression: ^[a-zA-Z0-9א-ת_-\s]*$
          description: Invalid input         
        noOutput: true
        icon: user

      - type: text
        name: comment
        label: Comment
        default: ""
        required: false
        minLength: 1
        maxLength: 40
        regex: 
          expression: ^[a-zA-Z0-9א-ת_-\s]*$
          description: Invalid input         
        noOutput: true
        icon: user
      
      - type: expression
        name: volcomment 
        label: volcomment
        hide: true
        expression: "'CR:\"$(cr)\" APPLICATION:\"$(application)\" Used For:\"$(usedfor)\" UNIT:\"$(unit)\" OWNER:\"$(owner)\" COMMENT:\"$(comment)\"'"
        model: general.comment


      ############################################################################################################################
      # check which copies are needed 
      ############################################################################################################################
      #get the type of copies
      - type: expression
        name: copy_types_jq 
        label: copy_types_jq
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|keys')"
        noOutput: true

      #validate dr1 is required copy
      - type: expression
        name: dr1
        label: dr1
        hide: true
        runLocal: true
        expression: "$(copy_types_jq).includes('dr1')"
        noOutput: true

      #validate dr2 is required copy
      - type: expression
        name: dr2
        label: dr2
        hide: true
        runLocal: true
        expression: "$(copy_types_jq).includes('dr2')"
        noOutput: true

      #validate b2d1 is required copy
      - type: expression
        name: b2d1
        label: b2d1
        hide: true
        runLocal: true
        expression: "$(copy_types_jq).includes('b2d1')"
        noOutput: true        
      #validate b2d2 is required copy
      - type: expression
        name: b2d2
        label: b2d2
        hide: true
        runLocal: true
        expression: "$(copy_types_jq).includes('b2d2')"
        noOutput: true              

      ############################################################################################################################
      # create prod copy location information
      ############################################################################################################################      
      
      #will build a %7C (|) cluster list that will be used for rest aiqum aggr filter 
      - type: expression
        name: aggr_filter_jq 
        label: aggr_filter_jq
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.prod|.clusters|keys|join(\"%7C\")')"
        group: Production
        noOutput: true

      #aggr enum 
      - type: query
        name: cluster_aggr
        label: Cluster/Aggregate
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/aggregates?state=online&cluster.name=$(aggr_filter_jq)','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Resource: (.cluster.name+\" : \"+.name)}+{Aggregate: .name}+{Cluster: .cluster.name}+{Node: .node.name}+{Size: (.space.block_storage.size/1024/1024/1024)|round|gb}+{AvailRaw:.space.block_storage.available}+{Available: (.space.block_storage.available/1024/1024/1024)|round|gb}+{Perf: (((.performance_capacity.used*100)|roundit|tostring)+\"%\")}+{Type: .type}]',[{AvailRaw:{direction:\"desc\"}},{Perf:{direction:\"asc\"}}],'')"
        columns:
        - Resource
        - Node
        - Size
        - Available
        - Perf
        - Type
        required: true
        default: __auto__  
        group: Production
        outputObject: true
        noOutput: true
      
      - type: expression       
        name: cluster
        label: cluster
        expression: "'$(cluster_aggr.Cluster)'"
        hide: true
        group: Production
        model: prod.cluster

      - type: expression       
        name: aggregate
        label: aggregate
        expression: "'$(cluster_aggr.Aggregate)'"
        hide: true
        group: Production
        model: prod.aggregate       
      
      # will build a %7C (|) svm list that will be used for rest aiqum aggr filter 
      - type: expression
        name: svm_filter_jq
        label: svm_filter_jq
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.prod|.clusters|.$(cluster)|join(\"%7C\")')"
        group: Production
        noOutput: true

      - type: query
        name: svm
        label: SVM
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(cluster)&name=$(svm_filter_jq)','','AIQUM','[.records[]|{Name: .name}]','','')"
        columns:
        - Name
        required: true
        default: __auto__  
        group: Production
        model: prod.svm

      - type: expression
        name: existingvols
        label: existingvols
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/volumes?cluster.name=$(cluster)&svm.name=$(svm)&max_records=1000','','AIQUM','[.records[]|.name]','','')"
        hide: true
        group: Production
        noOutput: true

      #prod snapshot policy 
      - type: expression
        name: snapshotpolicy
        label: snapshotpolicy
        hide: true        
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.prod|.snapshotpolicy')"
        group: Production
        model: prod.snapshotpolicy

      #prod efficiency configuration
      - type: expression
        name: efficiency
        label: efficiency
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.prod|.efficiency')"
        group: Production
        model: prod.efficiency            

      #prod cifs access
      - type: expression
        name: cifsaccess
        label: cifsaccess
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.prod|.cifsaccess')"
        model: prod.cifsaccess      
       
      ############################################################################################################################
      # create dr1 copy if required
      ############################################################################################################################      

      #dr1 name suffix if provided 
      - type: expression
        name: dr1_volnamesuffix
        label: dr1_volnamesuffix
        hide: true        
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.dr1|.volnamesuffix')"
        group: DR1
        noOutput: true
        dependencies:         
        - name: dr1
          values:
          - true 

      #dr1 vol name
      - type: expression
        name: dr1_volname
        label: Volume Name
        hide: true
        expression: "'$(volname)'+'$(dr1_volnamesuffix)'"
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true  
        model: dr1.volname

      #dr1 size ratio
      - type: expression
        name: dr1_sizeratio
        label: dr1_sizeratio
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.dr1|.sizeratio')"
        group: DR1
        noOutput: true
        dependencies:         
        - name: dr1
          values:
          - true 

      #vol size will be production vol size multiplied by size ratio
      - type: expression
        name: dr1_volsize
        label: Volume Size
        hide: true
        runLocal: true
        expression: "($(volsize)*$(dr1_sizeratio)).toString()"
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true  
        model: dr1.volsize

      #dedicated cluster 
      - type: expression
        name: dr1_dedicated_cluster 
        label: dr1_dedicated_cluster
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.dr1|.fixed_relationship_for_prod|.$(cluster)_$(svm)|.cluster')"
        group: DR1
        noOutput: true
        dependencies:         
        - name: dr1
          values:
          - true   

      #dedicated svm 
      - type: expression
        name: dr1_dedicated_svm 
        label: dr1_dedicated_svm
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.dr1|.fixed_relationship_for_prod|.$(cluster)_$(svm)|.svm')"
        group: DR1
        noOutput: true
        dependencies:         
        - name: dr1
          values:
          - true             

      #will build a %7C (|) cluster list that will be used for rest aiqum aggr filter for dedicated cluster
      - type: expression
        name: dr1_aggr_filter_jq
        label: dr1_aggr_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','if \"$(dr1_dedicated_cluster)\" != \"null\" then \"$(dr1_dedicated_cluster)\" else .services | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"dr1\")|.clusters|keys|join(\"%7C\") end')"
        group: DR1
        noOutput: true
        dependencies:         
        - name: dr1
          values:
          - true 

      #aggr enum 
      - type: query
        name: dr1_cluster_aggr
        label: Cluster/Aggregate
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/aggregates?state=online&cluster.name=$(dr1_aggr_filter_jq)','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Resource: (.cluster.name+\" : \"+.name)}+{Aggregate: .name}+{Cluster: .cluster.name}+{Node: .node.name}+{Size: (.space.block_storage.size/1024/1024/1024)|round|gb}+{AvailRaw:.space.block_storage.available}+{Available: (.space.block_storage.available/1024/1024/1024)|round|gb}+{Perf: (((.performance_capacity.used*100)|roundit|tostring)+\"%\")}+{Type: .type}]',[{AvailRaw:{direction:\"desc\"}},{Perf:{direction:\"asc\"}}],'')"
        columns:
        - Resource
        - Node
        - Size
        - Available
        - Perf
        - Type
        noOutput: true
        default: __auto__
        required: true
        group: DR1
        outputObject: true
        dependencies:         
        - name: dr1
          values:
          - true          
      
      #cluster name 
      - type: expression       
        name: dr1_cluster
        label: dr1_cluster
        expression: "'$(dr1_cluster_aggr.Cluster)'"
        hide: true
        group: DR1
        model: dr1.cluster
        dependencies:         
        - name: dr1
          values:
          - true          

      - type: expression       
        name: dr1_aggregate
        label: dr1_aggregate
        expression: "'$(dr1_cluster_aggr.Aggregate)'"
        hide: true
        group: DR1
        model: dr1.aggregate
        dependencies:         
        - name: dr1
          values:
          - true              
      
      # will build a %7C (|) svm list that will be used for rest aiqum aggr filter 
      - type: expression
        name: dr1_svm_filter_jq
        label: dr1_svm_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','if \"$(dr1_dedicated_svm)\" != \"null\" then \"$(dr1_dedicated_svm)\" else .services | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"dr1\")|.clusters|.$(dr1_cluster)|join(\"%7C\") end')"
        group: DR1
        noOutput: true
        dependencies:         
        - name: dr1
          values:
          - true                 

      - type: query
        name: dr1_svm
        label: SVM
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(dr1_cluster_aggr.Cluster)&name=$(dr1_svm_filter_jq)','','AIQUM','[.records[]|{Name: .name}]','','')"
        columns:
        - Name
        required: true
        default: __auto__  
        group: DR1
        model: dr1.svm
        dependencies:         
        - name: dr1
          values:
          - true  

      #dr1 source
      - type: expression
        name: dr1_source
        label: dr1_source
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.dr1|.source')"
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true
        model: dr1.source

        
      ############################################################################################################################
      # create dr2 copy if required
      ############################################################################################################################      

      #dr2 name suffix if provided 
      - type: expression
        name: dr2_volnamesuffix
        label: dr2_volnamesuffix
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.dr2|.volnamesuffix')"
        group: DR2
        noOutput: true
        dependencies:         
        - name: dr2
          values:
          - true 

      #dr2 vol name
      - type: expression
        name: dr2_volname
        label: Volume Name
        hide: true
        expression: "'$(volname)'+'$(dr2_volnamesuffix)'"
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true  
        model: dr2.volname

      #dr2 size ratio
      - type: expression
        name: dr2_sizeratio
        label: dr2_sizeratio
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.dr2|.sizeratio')"
        group: DR2
        noOutput: true
        dependencies:         
        - name: dr2
          values:
          - true 

      #vol size will be production vol size multiplied by size ratio
      - type: expression
        name: dr2_volsize
        label: Volume Size
        hide: true
        runLocal: true
        expression: "($(volsize)*$(dr2_sizeratio)).toString()"
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true  
        model: dr2.volsize

      #dedicated cluster 
      - type: expression
        name: dr2_dedicated_cluster 
        label: dr2_dedicated_cluster
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.dr2|.fixed_relationship_for_prod|.$(cluster)_$(svm)|.cluster')"
        group: DR2
        noOutput: true
        dependencies:         
        - name: dr2
          values:
          - true   

      #dedicated svm 
      - type: expression
        name: dr2_dedicated_svm 
        label: dr2_dedicated_svm
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.dr2|.fixed_relationship_for_prod|.$(cluster)_$(svm)|.svm')"
        group: DR2
        noOutput: true
        dependencies:         
        - name: dr2
          values:
          - true          

      #will build a %7C (|) cluster list that will be used for rest aiqum aggr filter 
      - type: expression
        name: dr2_aggr_filter_jq 
        label: dr2_aggr_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','if \"$(dr2_dedicated_cluster)\" != \"null\" then \"$(dr2_dedicated_cluster)\" else .services | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"dr2\")|.clusters|keys|join(\"%7C\") end')"
        group: DR2
        noOutput: true
        dependencies:         
        - name: dr2
          values:
          - true                

      #aggr enum 
      - type: query
        name: dr2_cluster_aggr
        label: Cluster/Aggregate
        # expression: "JSON.parse('$(dr2_cluster_aggr_jq)')"
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/aggregates?state=online&cluster.name=$(dr2_aggr_filter_jq)','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Resource: (.cluster.name+\" : \"+.name)}+{Aggregate: .name}+{Cluster: .cluster.name}+{Node: .node.name}+{Size: (.space.block_storage.size/1024/1024/1024)|round|gb}+{AvailRaw:.space.block_storage.available}+{Available: (.space.block_storage.available/1024/1024/1024)|round|gb}+{Perf: (((.performance_capacity.used*100)|roundit|tostring)+\"%\")}+{Type: .type}]',[{AvailRaw:{direction:\"desc\"}},{Perf:{direction:\"asc\"}}],'')"
        columns:
        - Resource
        - Node
        - Size
        - Available
        - Perf
        - Type
        noOutput: true
        default: __auto__
        required: true
        group: DR2
        outputObject: true
        dependencies:         
        - name: dr2
          values:
          - true          
      
      - type: expression       
        name: dr2_cluster
        label: dr2_cluster
        expression: "'$(dr2_cluster_aggr.Cluster)'"
        hide: true
        group: DR2
        model: dr2.cluster
        dependencies:         
        - name: dr2
          values:
          - true          

      - type: expression       
        name: dr2_aggregate
        label: dr2_aggregate
        expression: "'$(dr2_cluster_aggr.Aggregate)'"
        hide: true
        group: DR2
        model: dr2.aggregate
        dependencies:         
        - name: dr2
          values:
          - true              
      
      # will build a %7C (|) svm list that will be used for rest aiqum aggr filter 
      - type: expression
        name: dr2_svm_filter_jq
        label: dr2_svm_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','if \"$(dr2_dedicated_svm)\" != \"null\" then \"$(dr2_dedicated_svm)\" else .services | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"dr2\")|.clusters|.$(dr2_cluster)|join(\"%7C\") end')"
        group: DR2
        noOutput: true
        dependencies:         
        - name: dr2
          values:
          - true               

      - type: query
        name: dr2_svm
        label: SVM
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(dr2_cluster)&name=$(dr2_svm_filter_jq)','','AIQUM','[.records[]|{Name: .name}]','','')"
        columns:
        - Name
        required: true
        default: __auto__  
        group: DR2
        model: dr2.svm
        dependencies:         
        - name: dr2
          values:
          - true  

      #dr2 source
      - type: expression
        name: dr2_source
        label: dr2_source
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.dr2|.source')"
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true
        model: dr2.source

      ############################################################################################################################
      # create b2d1 copy if required
      ############################################################################################################################      

      #b2d1 name suffix if provided 
      - type: expression
        name: b2d1_volnamesuffix
        label: b2d1_volnamesuffix
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.b2d1|.volnamesuffix')"
        group: B2D1
        noOutput: true
        dependencies:         
        - name: b2d1
          values:
          - true 

      #b2d1 vol name
      - type: expression
        name: b2d1_volname
        label: Volume Name
        hide: true
        expression: "'$(volname)'+'$(b2d1_volnamesuffix)'"
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true  
        model: b2d1.volname

      #b2d1 size ratio
      - type: expression
        name: b2d1_sizeratio
        label: b2d1_sizeratio
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.b2d1|.sizeratio')"
        group: B2D1
        noOutput: true
        dependencies:         
        - name: b2d1
          values:
          - true 

      #vol size will be production vol size multiplied by size ratio
      - type: expression
        name: b2d1_volsize
        label: Volume Size
        hide: true
        runLocal: true
        expression: "($(volsize)*$(b2d1_sizeratio)).toString()"
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true  
        model: b2d1.volsize

      #dedicated cluster 
      - type: expression
        name: b2d1_dedicated_cluster 
        label: b2d1_dedicated_cluster
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.b2d1|.fixed_relationship_for_prod|.$(cluster)_$(svm)|.cluster')"
        group: B2D1
        noOutput: true
        dependencies:         
        - name: b2d1
          values:
          - true   

      #dedicated svm 
      - type: expression
        name: b2d1_dedicated_svm 
        label: b2d1_dedicated_svm
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.b2d1|.fixed_relationship_for_prod|.$(cluster)_$(svm)|.svm')"
        group: B2D1
        noOutput: true
        dependencies:         
        - name: b2d1
          values:
          - true 

      #will build a %7C (|) cluster list that will be used for rest aiqum aggr filter 
      - type: expression
        name: b2d1_aggr_filter_jq 
        label: b2d1_aggr_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','if \"$(b2d1_dedicated_cluster)\" != \"null\" then \"$(b2d1_dedicated_cluster)\" else .services | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"b2d1\")|.clusters|keys|join(\"%7C\") end')"
        group: B2D1
        noOutput: true
        dependencies:         
        - name: b2d1
          values:
          - true              

      #aggr enum 
      - type: query
        name: b2d1_cluster_aggr
        label: Cluster/Aggregate
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/aggregates?state=online&cluster.name=$(b2d1_aggr_filter_jq)','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Resource: (.cluster.name+\" : \"+.name)}+{Aggregate: .name}+{Cluster: .cluster.name}+{Node: .node.name}+{Size: (.space.block_storage.size/1024/1024/1024)|round|gb}+{AvailRaw:.space.block_storage.available}+{Available: (.space.block_storage.available/1024/1024/1024)|round|gb}+{Perf: (((.performance_capacity.used*100)|roundit|tostring)+\"%\")}+{Type: .type}]',[{AvailRaw:{direction:\"desc\"}},{Perf:{direction:\"asc\"}}],'')"
        columns:
        - Resource
        - Node
        - Size
        - Available
        - Perf
        - Type
        noOutput: true
        default: __auto__
        required: true
        group: B2D1
        outputObject: true
        dependencies:         
        - name: b2d1
          values:
          - true          
      
      - type: expression       
        name: b2d1_cluster
        label: b2d1_cluster
        expression: "'$(b2d1_cluster_aggr.Cluster)'"
        hide: true
        group: B2D1
        model: b2d1.cluster
        dependencies:         
        - name: b2d1
          values:
          - true          

      - type: expression       
        name: b2d1_aggregate
        label: b2d1_aggregate
        expression: "'$(b2d1_cluster_aggr.Aggregate)'"
        hide: true
        group: B2D1
        model: b2d1.aggregate
        dependencies:         
        - name: b2d1
          values:
          - true              
      
      # will build a %7C (|) svm list that will be used for rest aiqum aggr filter 
      - type: expression
        name: b2d1_svm_filter_jq
        label: b2d1_svm_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','if \"$(b2d1_dedicated_svm)\" != \"null\" then \"$(b2d1_dedicated_svm)\" else .services | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"b2d1\")|.clusters|.$(b2d1_cluster)|join(\"%7C\") end')"
        group: B2D1
        noOutput: true
        dependencies:         
        - name: b2d1
          values:
          - true               

      - type: query
        name: b2d1_svm
        label: SVM
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(b2d1_cluster)&name=$(b2d1_svm_filter_jq)','','AIQUM','[.records[]|{Name: .name}]','','')"
        columns:
        - Name
        required: true
        default: __auto__  
        group: B2D1
        model: b2d1.svm
        dependencies:         
        - name: b2d1
          values:
          - true  

      #B2D1 source
      - type: expression
        name: b2d1_source
        label: b2d1_source
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.b2d1|.source')"
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true
        model: b2d1.source  

      ############################################################################################################################
      # create b2d2 copy if required
      ############################################################################################################################      

      #b2d2 name suffix if provided 
      - type: expression
        name: b2d2_volnamesuffix
        label: b2d2_volnamesuffix
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.b2d2|.volnamesuffix')"
        group: B2D2
        noOutput: true
        dependencies:         
        - name: b2d2
          values:
          - true 

      #b2d2 vol name
      - type: expression
        name: b2d2_volname
        label: Volume Name
        hide: true
        expression: "'$(volname)'+'$(b2d2_volnamesuffix)'"
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true  
        model: b2d2.volname

      #b2d2 size ratio
      - type: expression
        name: b2d2_sizeratio
        label: b2d2_sizeratio
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.b2d2|.sizeratio')"
        group: B2D2
        noOutput: true
        dependencies:         
        - name: b2d2
          values:
          - true 

      #vol size will be production vol size multiplied by size ratio
      - type: expression
        name: b2d2_volsize
        label: Volume Size
        hide: true
        runLocal: true
        expression: "($(volsize)*$(b2d2_sizeratio)).toString()"
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true  
        model: b2d2.volsize

      #dedicated cluster 
      - type: expression
        name: b2d2_dedicated_cluster 
        label: b2d2_dedicated_cluster
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.b2d2|.fixed_relationship_for_prod|.$(cluster)_$(svm)|.cluster')"
        group: B2D2
        noOutput: true
        dependencies:         
        - name: b2d2
          values:
          - true   

      #dedicated svm 
      - type: expression
        name: b2d2_dedicated_svm 
        label: b2d2_dedicated_svm
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.b2d2|.fixed_relationship_for_prod|.$(cluster)_$(svm)|.svm')"
        group: B2D2
        noOutput: true
        dependencies:         
        - name: b2d2
          values:
          - true          

      #will build a %7C (|) cluster list that will be used for rest aiqum aggr filter 
      - type: expression
        name: b2d2_aggr_filter_jq 
        label: b2d2_aggr_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','if \"$(b2d2_dedicated_cluster)\" != \"null\" then \"$(b2d2_dedicated_cluster)\" else .services | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"b2d2\")|.clusters|keys|join(\"%7C\") end')"
        group: B2D2
        noOutput: true
        dependencies:         
        - name: b2d2
          values:
          - true                  

      #aggr enum 
      - type: query
        name: b2d2_cluster_aggr
        label: Cluster/Aggregate
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/aggregates?state=online&cluster.name=$(b2d2_aggr_filter_jq)','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Resource: (.cluster.name+\" : \"+.name)}+{Aggregate: .name}+{Cluster: .cluster.name}+{Node: .node.name}+{Size: (.space.block_storage.size/1024/1024/1024)|round|gb}+{AvailRaw:.space.block_storage.available}+{Available: (.space.block_storage.available/1024/1024/1024)|round|gb}+{Perf: (((.performance_capacity.used*100)|roundit|tostring)+\"%\")}+{Type: .type}]',[{AvailRaw:{direction:\"desc\"}},{Perf:{direction:\"asc\"}}],'')"
        columns:
        - Resource
        - Node
        - Size
        - Available
        - Perf
        - Type
        noOutput: true
        default: __auto__
        required: true
        group: B2D2
        outputObject: true
        dependencies:         
        - name: b2d2
          values:
          - true          
      
      - type: expression       
        name: b2d2_cluster
        label: b2d2_cluster
        expression: "'$(b2d2_cluster_aggr.Cluster)'"
        hide: true
        group: B2D2
        model: b2d2.cluster
        dependencies:         
        - name: b2d2
          values:
          - true          

      - type: expression       
        name: b2d2_aggregate
        label: b2d2_aggregate
        expression: "'$(b2d2_cluster_aggr.Aggregate)'"
        hide: true
        group: B2D2
        model: b2d2.aggregate
        dependencies:         
        - name: b2d2
          values:
          - true              
      
      # will build a %7C (|) svm list that will be used for rest aiqum aggr filter 
      - type: expression
        name: b2d2_svm_filter_jq
        label: b2d2_svm_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','if \"$(b2d2_dedicated_svm)\" != \"null\" then \"$(b2d2_dedicated_svm)\" else .services | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"b2d2\")|.clusters|.$(b2d2_cluster)|join(\"%7C\") end')"
        group: B2D2
        noOutput: true
        dependencies:         
        - name: b2d2
          values:
          - true             

      - type: query
        name: b2d2_svm
        label: SVM
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(b2d2_cluster)&name=$(b2d2_svm_filter_jq)','','AIQUM','[.records[]|{Name: .name}]','','')"
        columns:
        - Name
        required: true
        default: __auto__  
        group: B2D2
        model: b2d2.svm
        dependencies:         
        - name: b2d2
          values:
          - true  

      #B2D2 source
      - type: expression
        name: b2d2_source
        label: b2d2_source
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.b2d2|.source')"
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true
        model: b2d2.source         
      
  - name: Cleanup Ansibleforms Jobs
    showHelp: true
    help: |
      This form starts the `ansibleforms_job_cleanup.yaml` playbook
      It will remove all ansible job logs
    roles:
      - admin
    description: This will cleanup all ansible job logs.
    icon: trash
    categories:
      - Maintenance
    tileClass: has-background-danger-light
    playbook: ansibleforms_job_cleanup.yaml
    type: ansible
    fields:
      - type: expression
        name: mysql_credential
        expression: "'__self__'"
        label: Credential to connect to database
        asCredential: true
        required: true
        hide: true
      - type: checkbox
        name: areyousure
        label: Confirmation
        default: false
        placeholder: Are you sure you want to cleanup
      - type: text
        name: confirmation
        label: Please type YES to confirm you want to cleanup
        placeholder: YES
        required: true
        regex:
          expression: ^YES$
          description: Type YES to confirm
        dependencies:
          - name: areyousure
            values:
              - true

  - name: Create SVMs For Service
    help:
      This is used to create the required SVMs for a service  
    roles:
      - Provision
    description: New Service SVMs creation
    categories:
      - Provision
    icon: scroll
    playbook: create_service_svm.yaml
    inventory: hosts
    type: ansible
    fields:        

      ############################################################################################################################
      # environment General configuration
      ############################################################################################################################    

      - type: expression
        name: settings
        label: settings
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','')"
        noOutput: true 
        hide: true

      #aiqum server 
      - type: expression
        name: aiqum
        expression: "fn.fnJq($(settings),'.general.aiqum')" 
        label: aiqum
        hide: true 
        noOutput: true

      #ontap credentials to use in ansible 
      - type: expression         # readonly
        name: login
        label: login        
        expression: "'ONTAP'" 
        asCredential: true
        hide: true   

      #AD credentials to use in ansible 
      - type: expression         # readonly
        name: adlogin
        label: login
        expression: "'AD'" 
        asCredential: true
        hide: true         


      ############################################################################################################################
      # general DB queries 
      ############################################################################################################################

      #get list of cluster peers 
      - type: expression
        name: clusterpeers
        label: clusterpeers
        dbConfig:
          name: AIQUMSQL
          type: mysql
        hide: true
        query: select cluster.name as src, cluster_peer.remoteClusterName as dst, cluster_peer.availability as status 
                from netapp_model_view.cluster_peer, netapp_model_view.cluster 
                where cluster_peer.clusterId=cluster.objId 
        noOutput: true

      #select bd name and lif ip 
      - type: expression
        name: allip
        label: allip
        dbConfig:
          name: AIQUMSQL
          type: mysql
        hide: true
        query: select network_failover_group.name as bd,network_lif.address as addr 
                from netapp_model_view.network_lif,netapp_model_view.network_failover_group 
                where network_lif.failoverGroupId=network_failover_group.objid 
        noOutput: true
        
      #select ports 
      - type: expression
        name: ports
        label: ports
        dbConfig:
          name: AIQUMSQL
          type: mysql
        hide: true
        query: select cluster.name as cluster,node.name as node, network_port.name as port,network_port_broadcast_domain.name as bd 
                from netapp_model_view.network_port,netapp_model_view.network_port_broadcast_domain,netapp_model_view.cluster, netapp_model_view.node
                where network_port_broadcast_domain.objid=network_port.networkPortBroadcastDomainId and network_port.clusterId=cluster.objid 
                  and network_port.nodeId=node.objid and network_port.linkStatus='UP' and network_port_broadcast_domain.name != 'Cluster'
                  order by network_port.name
        noOutput: true
        group: Production    

      ############################################################################################################################
      # filter service, environment, company, location
      ############################################################################################################################

      - type: query
        name: service
        label: Service
        expression: "fn.fnJq($(settings),'.services|keys')"
        required: true
        default: __auto__
        model: general.service

      - type: query
        name: company
        label: Company
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|keys')"
        required: true
        default: __auto__
        model: general.company

      - type: query
        name: environment
        label: Environment
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|keys')"
        required: true
        default: __auto__     
        model: general.environment

      - type: query
        name: location
        label: Location
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|keys')"
        required: true
        default: __auto__
        model: general.location

      ############################################################################################################################
      # check which copies are needed 
      ############################################################################################################################
      #get the type of copies
      - type: expression
        name: copy_types_jq 
        label: copy_types_jq
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|keys')"
        noOutput: true

      #validate dr1 is required copy
      - type: expression
        name: dr1
        label: dr1
        hide: true
        runLocal: true
        expression: "$(copy_types_jq).includes('dr1')"
        noOutput: true

      #validate dr2 is required copy
      - type: expression
        name: dr2
        label: dr2
        hide: true
        runLocal: true
        expression: "$(copy_types_jq).includes('dr2')"
        noOutput: true

      #validate b2d1 is required copy
      - type: expression
        name: b2d1
        label: b2d1
        hide: true
        runLocal: true
        expression: "$(copy_types_jq).includes('b2d1')"
        noOutput: true

      #validate b2d2 is required copy
      - type: expression
        name: b2d2
        label: b2d2
        hide: true
        runLocal: true
        expression: "$(copy_types_jq).includes('b2d2')"
        noOutput: true              

      ############################################################################################################################
      # create prod copy location information
      ############################################################################################################################      

      #cluster enum 
      - type: query
        name: cluster_list
        label: Select cluster
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/cluster/clusters','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Name:.name}+{Version:((.version.generation|tostring)+\".\"+(.version.major|tostring)+\".\"+(.version.minor|tostring))}+{Location: .location}+{Contact:.contact}+{\"Total Capacity\":(.storage_capacity.total/1024/1024/1024)|round|gb}+{\"Available Capacity\":(.storage_capacity.available/1024/1024/1024)|round|gb}+{AvailRaw:.storage_capacity.available}]',[{AvailRaw:{direction:\"desc\"}},{Perf:{direction:\"asc\"}}],'')"
        columns:
        - Name
        - Version
        - Location
        - Contact
        - "Total Capacity"
        - "Available Capacity"
        required: true
        default: __auto__  
        group: Production
        outputObject: false
        noOutput: true

      - type: expression       
        name: cluster
        label: cluster
        expression: "'$(cluster_list)'"
        hide: true
        group: Production
        model: prod.cluster        

      - type: expression
        name: existingsvms
        label: existingsvms
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(cluster_list)&max_records=1000','','AIQUM','[.records[]|.name]','','')"
        hide: true
        group: Production
        noOutput: true        

      - type: text
        name: svm
        label: SVM Name
        default: ""
        required: true
        minLength: 1
        maxLength: 30
        regex: 
          expression: ^[a-z0-9_]*$
          description: Invalid SVM Name         
        notIn:
          field: "existingsvms"
          description: SVM already exists           
        icon: user
        group: Production
        model: prod.svm

      #network details 
      - type: expression
        name: netdetails
        label: netdetails
        hide: true        
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.prod|.newsvm|.network')"
        model: prod.netdetails
        group: Production

      #iprange for relevant network
      - type: expression
        name: netname
        label: netname
        expression: "($(netdetails)).name"
        hide: true
        runLocal: true
        noOutput: true
        group: Production

      #lif count
      - type: expression
        name: lifcount
        label: lifcount
        expression: "($(netdetails)).lifcount"
        hide: true
        runLocal: true        
        noOutput: true
        group: Production

      #domain name
      - type: expression
        name: domain
        label: domain
        expression: "($(netdetails)).domain"
        hide: true
        runLocal: true 
        noOutput: true   
        group: Production    

      #domain details 
      - type: expression
        name: domaindetails
        label: domaindetails
        hide: true        
        expression: "fn.fnJq($(settings),'.domains|.\"$(domain)\"')"
        model: prod.domaindetails
        group: Production

      #subnet mask 
      - type: expression
        name: subnetmask
        label: subnetmask
        expression: "fn.fnJq($(settings),'.networks|.\"$(netname)\"|.subnetmask')"
        hide: true
        noOutput: true
        group: Production    

      #iprange for relevant network
      - type: expression
        name: iprange
        label: iprange
        expression: "fn.fnJq($(settings),'.networks|.\"$(netname)\"|.iprange')"
        hide: true
        noOutput: true
        group: Production    

      #create ip list from ip range 
      - type: expression
        name: iplist
        label: iplist
        hide: true
        expression: fnc.fnIpRangeToList('$(iprange)')
        noOutput: true
        group: Production    
      
      #create array with all used ip within the bd 
      - type: expression
        name: usedip
        label: usedip
        hide: true
        expression: fn.fnJq($(allip),'[.[]|select (.bd==\"$(netname)\")|.addr]')
        noOutput: true
        group: Production    

      # create new array that removes all usedip from iplist 
      - type: expression
        name: availableip
        label: avaialbleip
        hide: true
        runLocal: true
        expression: (($(iplist)).filter(x=>!~($(usedip)).indexOf(x)).slice(0,$(lifcount)).length<$(lifcount))?[]:($(iplist)).filter(x=>!~($(usedip)).indexOf(x)).slice(0,$(lifcount))
        noOutput: true
        group: Production    

      #select ports for the ip addresses
      - type: expression
        name: selectedports
        label: selectedports
        hide: true
        expression: fn.fnJq($(ports),'[.[]|select (.cluster==\"$(cluster)\" and .bd==\"$(netname)\")] | .[:$(lifcount)]')
        noOutput: true
        group: Production

      #display ip/port allocation result
      - type: expression
        name: allocationstatus
        label: IP/Port allocation status
        hide: false
        expression: ($(availableip).length<$(lifcount))?'Not enough IP addresses avaialble':(($(selectedports).length<$(lifcount))?'Not enought ports to host requested IP addresses':'IP and port requirements are satisfied')
        runLocal: true 
        noOutput: true
        regex:
          expression: satisfied
          description: requirments are not satisfied          
        group: Production
            
      #consolidate selected ports info, ip and netmask into one object 
      - type: expression
        name: lifs
        label: lifs
        hide: true
        runLocal: true
        expression: $(selectedports).map((x,i)=>({...x,ip:$(availableip)[i],netmask:'$(subnetmask)'}))
        model: prod.lifs
        group: Production    

      ############################################################################################################################
      # create dr1 copy if required
      ############################################################################################################################      

      #cluster enum 
      - type: query
        name: dr1_cluster_list
        label: Select cluster
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/cluster/clusters','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Name:.name}+{Version:((.version.generation|tostring)+\".\"+(.version.major|tostring)+\".\"+(.version.minor|tostring))}+{Location: .location}+{Contact:.contact}+{\"Total Capacity\":(.storage_capacity.total/1024/1024/1024)|round|gb}+{\"Available Capacity\":(.storage_capacity.available/1024/1024/1024)|round|gb}+{AvailRaw:.storage_capacity.available}]',[{AvailRaw:{direction:\"desc\"}},{Perf:{direction:\"asc\"}}],'')"
        columns:
        - Name
        - Version
        - Location
        - Contact
        - "Total Capacity"
        - "Available Capacity"
        required: true
        default: __auto__  
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true  
        outputObject: false
        noOutput: true

      - type: expression       
        name: dr1_cluster
        label: dr1_cluster
        expression: "'$(dr1_cluster_list)'"
        default: ' '
        hide: true
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true  
        model: dr1.cluster          

      #dr1 list of avaialble sources 
      - type: expression
        name: dr1_source_copy
        label: dr1_source_copy
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.dr1|.source|.copy')"
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true  
        model: dr1.sourcecopy

      #dr1 source cluster 
      - type: expression
        name: dr1_source_cluster
        label: dr1_source_cluster
        runLocal: true
        hide: true
        expression: "'$(dr1_source_copy)'==='prod'?'$(cluster)':'$(dr1_source_copy)'==='dr1'?'$(dr1_cluster)':'$(dr1_source_copy)'==='dr2'?'$(dr2_cluster)':'$(dr1_source_copy)'==='b2d1'?'$(b2d1_cluster)':'$(dr1_source_copy)'==='b2d2'?'$(b2d2_cluster)':''"
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true  
        model: dr1.sourcecluster 

      #dr1 validate there is peer between clusters
      - type: expression
        name: dr1_cluster_peer
        label: dr1_cluster_peer
        expression: "fn.fnJq($(clusterpeers),'.[]| select (.src==\"$(dr1_cluster)\" and .dst==\"$(dr1_source_cluster)\" and .status==\"AVAILABLE\")|.dst')"
        hide: true
        noOutput: true
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true

      #dr1 svm suffix
      - type: expression
        name: dr1_svmsuffix
        label: dr1_svmsuffix
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.dr1|.newsvm|.suffix')"
        group: DR1
        noOutput: true
        dependencies:         
        - name: dr1
          values:
          - true 

      #list of existing svm in the dr + prod svm
      - type: expression
        name: dr1_existingsvms
        label: dr1_existingsvms
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(dr1_cluster)&max_records=1000','','AIQUM','[.records[]|.name]|. +=[\"$(svm)\"]','','')"
        hide: true
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true  
        noOutput: true    

      #dr1 svm name
      - type: expression
        name: dr1_svm
        label: SVM Name
        hide: false
        runLocal: true
        expression: "'$(dr1_svmsuffix)'=='null' || '$(dr1_svmsuffix)'=='' ? '$(svm)'+'_dr1' : '$(svm)'+'$(dr1_svmsuffix)'"
        default: ' '
        group: DR1
        model: dr1.svm
        dependencies:         
        - name: dr1
          values:
          - true 
        editable: true        
        regex: 
          expression: ^[a-z0-9_]*$
          description: Invalid SVM Name         
        notIn:
          field: "dr1_existingsvms"
          description: SVM already exists or duplicate    
        icon: user    

      #network details 
      - type: expression
        name: dr1_netdetails
        label: dr1_netdetails
        hide: true        
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.dr1|.newsvm|.network')"
        model: dr1.netdetails
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true  

      #iprange for relevant network
      - type: expression
        name: dr1_netname
        label: dr1_netname
        expression: "($(dr1_netdetails)).name"
        hide: true
        runLocal: true
        noOutput: true
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true  

      #lif count
      - type: expression
        name: dr1_lifcount
        label: dr1_lifcount
        expression: "($(dr1_netdetails)).lifcount"
        hide: true
        runLocal: true        
        noOutput: true
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true  

      #domain name
      - type: expression
        name: dr1_domain
        label: dr1_domain
        expression: "($(dr1_netdetails)).domain"
        hide: true
        runLocal: true 
        noOutput: true   
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true      

      #domain details 
      - type: expression
        name: dr1_domaindetails
        label: dr1_domaindetails
        hide: true        
        expression: "fn.fnJq($(settings),'.domains|.\"$(dr1_domain)\"')"
        model: dr1.domaindetails
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true  

      #subnet mask 
      - type: expression
        name: dr1_subnetmask
        label: dr1_subnetmask
        expression: "fn.fnJq($(settings),'.networks|.\"$(dr1_netname)\"|.subnetmask')"
        hide: true
        noOutput: true
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true      

      #iprange for relevant network
      - type: expression
        name: dr1_iprange
        label: dr1_iprange
        expression: "fn.fnJq($(settings),'.networks|.\"$(dr1_netname)\"|.iprange')"
        hide: false
        noOutput: true
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true      

      #create ip list from ip range 
      - type: expression
        name: dr1_iplist
        label: dr1_iplist
        hide: true
        expression: fnc.fnIpRangeToList('$(dr1_iprange)',$(availableip)) #second argument remove production selected ip from the range 
        default: []
        noOutput: false
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true      
          
      #create array with all used ip within the bd 
      - type: expression
        name: dr1_usedip
        label: dr1_usedip
        hide: true
        expression: fn.fnJq($(allip),'[.[]|select (.bd==\"$(dr1_netname)\")|.addr]')
        noOutput: true
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true      

      # create new array that removes all usedip from iplist 
      - type: expression
        name: dr1_availableip
        label: dr1_avaialbleip
        hide: true
        runLocal: true
        expression: (($(dr1_iplist)).filter(x=>!~($(dr1_usedip)).indexOf(x)).slice(0,$(dr1_lifcount)).length<$(dr1_lifcount))?[]:($(dr1_iplist)).filter(x=>!~($(dr1_usedip)).indexOf(x)).slice(0,$(dr1_lifcount))
        default: []
        noOutput: true
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true      

      #select ports for the ip addresses
      - type: expression
        name: dr1_selectedports
        label: dr1_selectedports
        hide: true
        expression: fn.fnJq($(ports),'[.[]|select (.cluster==\"$(dr1_cluster)\" and .bd==\"$(dr1_netname)\")] | .[:$(dr1_lifcount)]')
        noOutput: true
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true  

      #display ip/port allocation result
      - type: expression
        name: dr1_allocationstatus
        label: IP/Port allocation status
        hide: false
        expression: ($(dr1_availableip)).length<$(dr1_lifcount)?'Not enough IP addresses avaialble':($(dr1_selectedports)).length<$(dr1_lifcount)?'Not enought ports to host requested IP addresses':'$(dr1_cluster_peer)'==''&&'$(dr1_cluster)'!='$(dr1_source_cluster)'?'Cluster peer to $(dr1_source_cluster) is missing or not healthy':'IP, ports and cluster peer requirements are satisfied'
        runLocal: true 
        noOutput: true
        regex:
          expression: satisfied
          description: requirments are not satisfied          
        ignoreIncomplete: false
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true      

      - type: expression
        name: dr1_lifs
        label: dr1_lifs
        hide: true
        runLocal: true
        expression: $(dr1_selectedports).map((x,i)=>({...x,ip:$(dr1_availableip)[i],netmask:'$(dr1_subnetmask)'}))
        model: dr1.lifs
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true      

      ############################################################################################################################
      # create dr2 copy if required
      ############################################################################################################################      

      #cluster enum 
      - type: query
        name: dr2_cluster_list
        label: Select cluster
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/cluster/clusters','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Name:.name}+{Version:((.version.generation|tostring)+\".\"+(.version.major|tostring)+\".\"+(.version.minor|tostring))}+{Location: .location}+{Contact:.contact}+{\"Total Capacity\":(.storage_capacity.total/1024/1024/1024)|round|gb}+{\"Available Capacity\":(.storage_capacity.available/1024/1024/1024)|round|gb}+{AvailRaw:.storage_capacity.available}]',[{AvailRaw:{direction:\"desc\"}},{Perf:{direction:\"asc\"}}],'')"
        columns:
        - Name
        - Version
        - Location
        - Contact
        - "Total Capacity"
        - "Available Capacity"
        required: true
        default: __auto__  
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true  
        outputObject: false
        noOutput: true

      - type: expression       
        name: dr2_cluster
        label: dr2_cluster
        expression: "'$(dr2_cluster_list)'"
        default: ' '
        hide: true
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true  
        model: dr2.cluster          

      #dr2 list of avaialble sources 
      - type: expression
        name: dr2_source_copy
        label: dr2_source_copy
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.dr2|.source|.copy')"
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true  
        model: dr2.sourcecopy

      #dr2 source cluster 
      - type: expression
        name: dr2_source_cluster
        label: dr2_source_cluster
        runLocal: true
        hide: true
        expression: "'$(dr2_source_copy)'==='prod'?'$(cluster)':'$(dr2_source_copy)'==='dr1'?'$(dr1_cluster)':''"
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true  
        model: dr2.sourcecluster 

      #dr2 validate there is peer between clusters
      - type: expression
        name: dr2_cluster_peer
        label: dr2_cluster_peer
        expression: "fn.fnJq($(clusterpeers),'.[]| select (.src==\"$(dr2_cluster)\" and .dst==\"$(dr2_source_cluster)\" and .status==\"AVAILABLE\")|.dst')"
        hide: true
        noOutput: true
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true

      #dr2 svm suffix
      - type: expression
        name: dr2_svmsuffix
        label: dr2_svmsuffix
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.dr2|.newsvm|.suffix')"
        group: DR2
        noOutput: true
        dependencies:         
        - name: dr2
          values:
          - true          

      #list of existing svm in the dr + prod svm + dr1 svm
      - type: expression
        name: dr2_existingsvms
        label: dr2_existingsvms
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(dr2_cluster)&max_records=1000','','AIQUM','[.records[]|.name]|. +=[\"$(svm)\"]|. +=[\"$(dr1_svm)\"]','','')"
        hide: true
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true  
        noOutput: true    

      #dr2 svm name
      - type: expression
        name: dr2_svm
        label: SVM Name
        hide: false
        runLocal: true
        expression: "'$(dr2_svmsuffix)'=='null' || '$(dr2_svmsuffix)'=='' ? '$(svm)'+'_dr2' : '$(svm)'+'$(dr2_svmsuffix)'"
        default: ' '
        group: DR2
        model: dr2.svm
        dependencies:         
        - name: dr2
          values:
          - true 
        editable: true        
        regex: 
          expression: ^[a-z0-9_]*$
          description: Invalid SVM Name         
        notIn:
          field: "dr2_existingsvms"
          description: SVM already exists or duplicate    
        icon: user    

      #network details 
      - type: expression
        name: dr2_netdetails
        label: dr2_netdetails
        hide: true        
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.dr2|.newsvm|.network')"
        model: dr2.netdetails
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true  

      #iprange for relevant network
      - type: expression
        name: dr2_netname
        label: dr2_netname
        expression: "($(dr2_netdetails)).name"
        hide: true
        runLocal: true
        noOutput: true
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true  

      #lif count
      - type: expression
        name: dr2_lifcount
        label: dr2_lifcount
        expression: "($(dr2_netdetails)).lifcount"
        hide: true
        runLocal: true        
        noOutput: true
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true  

      #domain name
      - type: expression
        name: dr2_domain
        label: dr2_domain
        expression: "($(dr2_netdetails)).domain"
        hide: true
        runLocal: true 
        noOutput: true   
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true      

      #domain details 
      - type: expression
        name: dr2_domaindetails
        label: dr2_domaindetails
        hide: true        
        expression: "fn.fnJq($(settings),'.domains|.\"$(dr2_domain)\"')"
        model: dr2.domaindetails
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true  

      #subnet mask 
      - type: expression
        name: dr2_subnetmask
        label: dr2_subnetmask
        expression: "fn.fnJq($(settings),'.networks|.\"$(dr2_netname)\"|.subnetmask')"
        hide: true
        noOutput: true
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true      

      #iprange for relevant network
      - type: expression
        name: dr2_iprange
        label: dr2_iprange
        expression: "fn.fnJq($(settings),'.networks|.\"$(dr2_netname)\"|.iprange')"
        hide: true
        noOutput: true
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true      

      #create list of already used ip  
      - type: expression
        name: dr2_already_used_ip
        label: dr2_already_used_ip
        hide: true
        runLocal: true 
        expression: $(availableip).concat($(dr1_availableip))
        noOutput: true
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true

      #create ip list from ip range 
      - type: expression
        name: dr2_iplist
        label: dr2_iplist
        hide: true
        expression: fnc.fnIpRangeToList('$(dr2_iprange)',$(dr2_already_used_ip))
        noOutput: true
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true      
          
      #create array with all used ip within the bd 
      - type: expression
        name: dr2_usedip
        label: dr2_usedip
        hide: true
        expression: fn.fnJq($(allip),'[.[]|select (.bd==\"$(dr2_netname)\")|.addr]')
        noOutput: true
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true      

      # create new array that removes all usedip from iplist 
      - type: expression
        name: dr2_availableip
        label: dr2_avaialbleip
        hide: true
        runLocal: true
        expression: (($(dr2_iplist)).filter(x=>!~($(dr2_usedip)).indexOf(x)).slice(0,$(dr2_lifcount)).length<$(dr2_lifcount))?[]:($(dr2_iplist)).filter(x=>!~($(dr2_usedip)).indexOf(x)).slice(0,$(dr2_lifcount))
        default: []
        noOutput: true
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true      

      #select ports for the ip addresses
      - type: expression
        name: dr2_selectedports
        label: dr2_selectedports
        hide: true
        expression: fn.fnJq($(ports),'[.[]|select (.cluster==\"$(dr2_cluster)\" and .bd==\"$(dr2_netname)\")] | .[:$(dr2_lifcount)]')
        noOutput: true
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true  

      #display ip/port allocation result
      - type: expression
        name: dr2_allocationstatus
        label: IP/Port allocation status
        hide: false
        expression: ($(dr2_availableip)).length<$(dr2_lifcount)?'Not enough IP addresses avaialble':($(dr2_selectedports)).length<$(dr2_lifcount)?'Not enought ports to host requested IP addresses':'$(dr2_cluster_peer)'==''&&'$(dr2_cluster)'!='$(dr2_source_cluster)'?'Cluster peer to $(dr2_source_cluster) is missing or not healthy':'IP, ports and cluster peer requirements are satisfied'
        runLocal: true 
        noOutput: true
        regex:
          expression: satisfied
          description: requirments are not satisfied          
        ignoreIncomplete: false
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true      

      - type: expression
        name: dr2_lifs
        label: dr2_lifs
        hide: true
        runLocal: true
        expression: $(dr2_selectedports).map((x,i)=>({...x,ip:$(dr2_availableip)[i],netmask:'$(dr2_subnetmask)'}))
        model: dr2.lifs
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true      

      ############################################################################################################################
      # create b2d1 copy if required
      ############################################################################################################################      

      #cluster enum 
      - type: query
        name: b2d1_cluster_list
        label: Select cluster
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/cluster/clusters','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Name:.name}+{Version:((.version.generation|tostring)+\".\"+(.version.major|tostring)+\".\"+(.version.minor|tostring))}+{Location: .location}+{Contact:.contact}+{\"Total Capacity\":(.storage_capacity.total/1024/1024/1024)|round|gb}+{\"Available Capacity\":(.storage_capacity.available/1024/1024/1024)|round|gb}+{AvailRaw:.storage_capacity.available}]',[{AvailRaw:{direction:\"desc\"}},{Perf:{direction:\"asc\"}}],'')"
        columns:
        - Name
        - Version
        - Location
        - Contact
        - "Total Capacity"
        - "Available Capacity"
        required: true
        default: __auto__  
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true  
        outputObject: false
        noOutput: true

      - type: expression       
        name: b2d1_cluster
        label: b2d1_cluster
        expression: "'$(b2d1_cluster_list)'"
        default: ' '
        hide: true
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true  
        model: b2d1.cluster          

      #b2d1 list of avaialble sources 
      - type: expression
        name: b2d1_source_copy
        label: b2d1_source_copy
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.b2d1|.source|.copy')"
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true  
        model: b2d1.sourcecopy

      #b2d1 source cluster 
      - type: expression
        name: b2d1_source_cluster
        label: b2d1_source_cluster
        runLocal: true
        hide: true
        expression: "'$(b2d1_source_copy)'==='prod'?'$(cluster)':'$(b2d1_source_copy)'==='dr1'?'$(dr1_cluster)':'$(b2d1_source_copy)'==='dr2'?'$(dr2_cluster)':''"
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true  
        model: b2d1.sourcecluster 

      #b2d1 validate there is peer between clusters
      - type: expression
        name: b2d1_cluster_peer
        label: b2d1_cluster_peer
        expression: "fn.fnJq($(clusterpeers),'.[]| select (.src==\"$(b2d1_cluster)\" and .dst==\"$(b2d1_source_cluster)\" and .status==\"AVAILABLE\")|.dst')"
        hide: true
        noOutput: true
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true

      #b2d1 svm suffix
      - type: expression
        name: b2d1_svmsuffix
        label: b2d1_svmsuffix
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.b2d1|.newsvm|.suffix')"
        group: B2D1
        noOutput: true
        dependencies:         
        - name: b2d1
          values:
          - true 

      #list of existing svm in the dr + prod svm
      - type: expression
        name: b2d1_existingsvms
        label: b2d1_existingsvms
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(b2d1_cluster)&max_records=1000','','AIQUM','[.records[]|.name]|. +=[\"$(svm)\"] |. +=[\"$(dr1_svm)\"]|. +=[\"$(dr2_svm)\"]','','')"
        hide: true
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true  
        noOutput: true    

      #b2d1 svm name
      - type: expression
        name: b2d1_svm
        label: SVM Name
        hide: false
        runLocal: true
        expression: "'$(b2d1_svmsuffix)'=='null' || '$(b2d1_svmsuffix)'=='' ? '$(svm)'+'_b2d1' : '$(svm)'+'$(b2d1_svmsuffix)'"
        default: ' '
        group: B2D1
        model: b2d1.svm
        dependencies:         
        - name: b2d1
          values:
          - true 
        editable: true        
        regex: 
          expression: ^[a-z0-9_]*$
          description: Invalid SVM Name         
        notIn:
          field: "b2d1_existingsvms"
          description: SVM already exists or duplicate    
        icon: user    

      #network details 
      - type: expression
        name: b2d1_netdetails
        label: b2d1_netdetails
        hide: true        
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.b2d1|.newsvm|.network')"
        model: b2d1.netdetails
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true  

      #iprange for relevant network
      - type: expression
        name: b2d1_netname
        label: b2d1_netname
        expression: "($(b2d1_netdetails)).name"
        hide: true
        runLocal: true
        noOutput: true
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true  

      #lif count
      - type: expression
        name: b2d1_lifcount
        label: b2d1_lifcount
        expression: "($(b2d1_netdetails)).lifcount"
        hide: true
        runLocal: true        
        noOutput: true
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true  

      #domain name
      - type: expression
        name: b2d1_domain
        label: b2d1_domain
        expression: "($(b2d1_netdetails)).domain"
        hide: true
        runLocal: true 
        noOutput: true   
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true      

      #domain details 
      - type: expression
        name: b2d1_domaindetails
        label: b2d1_domaindetails
        hide: true        
        expression: "fn.fnJq($(settings),'.domains|.\"$(b2d1_domain)\"')"
        model: b2d1.domaindetails
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true  

      #subnet mask 
      - type: expression
        name: b2d1_subnetmask
        label: b2d1_subnetmask
        expression: "fn.fnJq($(settings),'.networks|.\"$(b2d1_netname)\"|.subnetmask')"
        hide: true
        noOutput: true
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true      

      #iprange for relevant network
      - type: expression
        name: b2d1_iprange
        label: b2d1_iprange
        expression: "fn.fnJq($(settings),'.networks|.\"$(b2d1_netname)\"|.iprange')"
        hide: true
        noOutput: true
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true      

      #create list of already used ip  
      - type: expression
        name: b2d1_already_used_ip
        label: b2d1_already_used_ip
        hide: true
        runLocal: true 
        expression: $(availableip).concat($(dr1_availableip),$(dr2_availableip))
        noOutput: true
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true

      #create ip list from ip range 
      - type: expression
        name: b2d1_iplist
        label: b2d1_iplist
        hide: true
        expression: fnc.fnIpRangeToList('$(b2d1_iprange)',$(b2d1_already_used_ip))
        noOutput: true
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true      
          
      #create array with all used ip within the bd 
      - type: expression
        name: b2d1_usedip
        label: b2d1_usedip
        hide: true
        expression: fn.fnJq($(allip),'[.[]|select (.bd==\"$(b2d1_netname)\")|.addr]')
        noOutput: true
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true      

      # create new array that removes all usedip from iplist 
      - type: expression
        name: b2d1_availableip
        label: b2d1_avaialbleip
        hide: true
        runLocal: true
        expression: (($(b2d1_iplist)).filter(x=>!~($(b2d1_usedip)).indexOf(x)).slice(0,$(b2d1_lifcount)).length<$(b2d1_lifcount))?[]:($(b2d1_iplist)).filter(x=>!~($(b2d1_usedip)).indexOf(x)).slice(0,$(b2d1_lifcount))
        default: []
        noOutput: true
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true      

      #select ports for the ip addresses
      - type: expression
        name: b2d1_selectedports
        label: b2d1_selectedports
        hide: true
        expression: fn.fnJq($(ports),'[.[]|select (.cluster==\"$(b2d1_cluster)\" and .bd==\"$(b2d1_netname)\")] | .[:$(b2d1_lifcount)]')
        noOutput: true
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true  

      #display ip/port allocation result
      - type: expression
        name: b2d1_allocationstatus
        label: IP/Port allocation status
        hide: false
        expression: ($(b2d1_availableip)).length<$(b2d1_lifcount)?'Not enough IP addresses avaialble':($(b2d1_selectedports)).length<$(b2d1_lifcount)?'Not enought ports to host requested IP addresses':'$(b2d1_cluster_peer)'==''&&'$(b2d1_cluster)'!='$(b2d1_source_cluster)'?'Cluster peer to $(b2d1_source_cluster) is missing or not healthy':'IP, ports and cluster peer requirements are satisfied'
        runLocal: true 
        noOutput: true
        regex:
          expression: satisfied
          description: requirments are not satisfied          
        ignoreIncomplete: false
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true      

      - type: expression
        name: b2d1_lifs
        label: b2d1_lifs
        hide: true
        runLocal: true
        expression: $(b2d1_selectedports).map((x,i)=>({...x,ip:$(b2d1_availableip)[i],netmask:'$(b2d1_subnetmask)'}))
        model: b2d1.lifs
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true      

      ############################################################################################################################
      # create b2d2 copy if required
      ############################################################################################################################      

      #cluster enum 
      - type: query
        name: b2d2_cluster_list
        label: Select cluster
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/cluster/clusters','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Name:.name}+{Version:((.version.generation|tostring)+\".\"+(.version.major|tostring)+\".\"+(.version.minor|tostring))}+{Location: .location}+{Contact:.contact}+{\"Total Capacity\":(.storage_capacity.total/1024/1024/1024)|round|gb}+{\"Available Capacity\":(.storage_capacity.available/1024/1024/1024)|round|gb}+{AvailRaw:.storage_capacity.available}]',[{AvailRaw:{direction:\"desc\"}},{Perf:{direction:\"asc\"}}],'')"
        columns:
        - Name
        - Version
        - Location
        - Contact
        - "Total Capacity"
        - "Available Capacity"
        required: true
        default: __auto__  
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true  
        outputObject: false
        noOutput: true

      - type: expression       
        name: b2d2_cluster
        label: b2d2_cluster
        expression: "'$(b2d2_cluster_list)'"
        default: ' '
        hide: true
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true  
        model: b2d2.cluster          

      #b2d2 list of avaialble sources 
      - type: expression
        name: b2d2_source_copy
        label: b2d2_source_copy
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.b2d2|.source|.copy')"
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true  
        model: b2d2.sourcecopy

      #b2d2 source cluster 
      - type: expression
        name: b2d2_source_cluster
        label: b2d2_source_cluster
        runLocal: true
        hide: true
        expression: "'$(b2d2_source_copy)'==='prod'?'$(cluster)':'$(b2d2_source_copy)'==='dr1'?'$(dr1_cluster)':'$(b2d2_source_copy)'==='dr2'?'$(dr2_cluster)':'$(b2d2_source_copy)'==='b2d1'?'$(b2d1_cluster)':''"
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true  
        model: b2d2.sourcecluster 

      #b2d2 validate there is peer between clusters
      - type: expression
        name: b2d2_cluster_peer
        label: b2d2_cluster_peer
        expression: "fn.fnJq($(clusterpeers),'.[]| select (.src==\"$(b2d2_cluster)\" and .dst==\"$(b2d2_source_cluster)\" and .status==\"AVAILABLE\")|.dst')"
        hide: true
        noOutput: true
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true

      #b2d2 svm suffix
      - type: expression
        name: b2d2_svmsuffix
        label: b2d2_svmsuffix
        hide: true
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.b2d2|.newsvm|.suffix')"
        group: B2D2
        noOutput: true
        dependencies:         
        - name: b2d2
          values:
          - true 

      #list of existing svm in the dr + prod svm
      - type: expression
        name: b2d2_existingsvms
        label: b2d2_existingsvms
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(b2d2_cluster)&max_records=1000','','AIQUM','[.records[]|.name]|. +=[\"$(svm)\"]|. +=[\"$(dr1_svm)\"]|. +=[\"$(dr2_svm)\"]|. +=[\"$(b2d1_svm)\"]','','')"
        hide: true
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true  
        noOutput: true    

      #b2d2 svm name
      - type: expression
        name: b2d2_svm
        label: SVM Name
        hide: false
        runLocal: true
        expression: "'$(b2d2_svmsuffix)'=='null' || '$(b2d2_svmsuffix)'=='' ? '$(svm)'+'_b2d2' : '$(svm)'+'$(b2d2_svmsuffix)'"
        default: ' '
        group: B2D2
        model: b2d2.svm
        dependencies:         
        - name: b2d2
          values:
          - true 
        editable: true        
        regex: 
          expression: ^[a-z0-9_]*$
          description: Invalid SVM Name         
        notIn:
          field: "b2d2_existingsvms"
          description: SVM already exists or duplicate    
        icon: user    

      #network details 
      - type: expression
        name: b2d2_netdetails
        label: b2d2_netdetails
        hide: true        
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|.\"$(location)\"|.b2d2|.newsvm|.network')"
        model: b2d2.netdetails
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true  

      #iprange for relevant network
      - type: expression
        name: b2d2_netname
        label: b2d2_netname
        expression: "($(b2d2_netdetails)).name"
        hide: true
        runLocal: true
        noOutput: true
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true  

      #lif count
      - type: expression
        name: b2d2_lifcount
        label: b2d2_lifcount
        expression: "($(b2d2_netdetails)).lifcount"
        hide: true
        runLocal: true        
        noOutput: true
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true  

      #domain name
      - type: expression
        name: b2d2_domain
        label: b2d2_domain
        expression: "($(b2d2_netdetails)).domain"
        hide: true
        runLocal: true 
        noOutput: true   
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true      

      #domain details 
      - type: expression
        name: b2d2_domaindetails
        label: b2d2_domaindetails
        hide: true        
        expression: "fn.fnJq($(settings),'.domains|.\"$(b2d2_domain)\"')"
        model: b2d2.domaindetails
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true  

      #subnet mask 
      - type: expression
        name: b2d2_subnetmask
        label: b2d2_subnetmask
        expression: "fn.fnJq($(settings),'.networks|.\"$(b2d2_netname)\"|.subnetmask')"
        hide: true
        noOutput: true
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true      

      #iprange for relevant network
      - type: expression
        name: b2d2_iprange
        label: b2d2_iprange
        expression: "fn.fnJq($(settings),'.networks|.\"$(b2d2_netname)\"|.iprange')"
        hide: true
        noOutput: true
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true      

      #create list of already used ip  
      - type: expression
        name: b2d2_already_used_ip
        label: b2d2_already_used_ip
        hide: true
        runLocal: true 
        expression: $(availableip).concat($(dr1_availableip),$(dr2_availableip),$(b2d1_availableip))
        noOutput: true
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true

      #create ip list from ip range 
      - type: expression
        name: b2d2_iplist
        label: b2d2_iplist
        hide: true
        expression: fnc.fnIpRangeToList('$(b2d2_iprange)',$(b2d2_already_used_ip))
        noOutput: true
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true      
          
      #create array with all used ip within the bd 
      - type: expression
        name: b2d2_usedip
        label: b2d2_usedip
        hide: true
        expression: fn.fnJq($(allip),'[.[]|select (.bd==\"$(b2d2_netname)\")|.addr]')
        noOutput: true
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true      

      # create new array that removes all usedip from iplist 
      - type: expression
        name: b2d2_availableip
        label: b2d2_avaialbleip
        hide: true
        runLocal: true
        expression: (($(b2d2_iplist)).filter(x=>!~($(b2d2_usedip)).indexOf(x)).slice(0,$(b2d2_lifcount)).length<$(b2d2_lifcount))?[]:($(b2d2_iplist)).filter(x=>!~($(b2d2_usedip)).indexOf(x)).slice(0,$(b2d2_lifcount))
        default: []
        noOutput: true
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true      

      #select ports for the ip addresses
      - type: expression
        name: b2d2_selectedports
        label: b2d2_selectedports
        hide: true
        expression: fn.fnJq($(ports),'[.[]|select (.cluster==\"$(b2d2_cluster)\" and .bd==\"$(b2d2_netname)\")] | .[:$(b2d2_lifcount)]')
        noOutput: true
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true  

      #display ip/port allocation result
      - type: expression
        name: b2d2_allocationstatus
        label: IP/Port allocation status
        hide: false
        expression: ($(b2d2_availableip)).length<$(b2d2_lifcount)?'Not enough IP addresses avaialble':($(b2d2_selectedports)).length<$(b2d2_lifcount)?'Not enought ports to host requested IP addresses':'$(b2d2_cluster_peer)'==''&&'$(b2d2_cluster)'!='$(b2d2_source_cluster)'?'Cluster peer to $(b2d2_source_cluster) is missing or not healthy':'IP, ports and cluster peer requirements are satisfied'
        runLocal: true 
        noOutput: true
        regex:
          expression: satisfied
          description: requirments are not satisfied          
        ignoreIncomplete: false
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true      

      - type: expression
        name: b2d2_lifs
        label: b2d2_lifs
        hide: true
        runLocal: true
        expression: $(b2d2_selectedports).map((x,i)=>({...x,ip:$(b2d2_availableip)[i],netmask:'$(b2d2_subnetmask)'}))
        model: b2d2.lifs
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true      


  - name: Debug 
    help:
      Debug  
    roles:
      - Provision
    description: Debug
    categories:
      - Provision
    icon: scroll
    playbook: debug.yaml
    inventory: hosts
    type: ansible
    fields:        

      ############################################################################################################################
      # environment General configuration
      ############################################################################################################################    

      #settings
      - type: expression
        name: settings
        label: settings
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','')"
        noOutput: true 
        hide: true

      #aiqum server 
      - type: expression
        name: aiqum
        expression: "fn.fnJq($(settings),'.general.aiqum')" 
        label: aiqum
        hide: false 
        noOutput: true

      #ontap credentials to use in ansible 
      - type: expression         # readonly
        name: login
        expression: "'ONTAP'" 
        label: login
        asCredential: true
        hide: true 

      #ontap credentials to use in ansible 
      - type: expression         # readonly
        name: adlogin
        label: adlogin
        expression: "'AD'" 
        asCredential: true
        hide: true         

      # ############################################################################################################################
      # # filter service, environment, company, location
      # ############################################################################################################################

      - type: query
        name: service
        label: Service
        expression: "fn.fnJq($(settings),'.services|keys')"
        required: true
        default: __auto__
        model: general.service

      - type: query
        name: company
        label: Company
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|keys')"
        required: true
        default: __auto__
        model: general.company

      - type: query
        name: environment
        label: Environment
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|keys')"
        required: true
        default: __auto__     
        model: general.environment

      - type: query
        name: location
        label: Location
        expression: "fn.fnJq($(settings),'.services|.\"$(service)\"|.\"$(company)\"|.\"$(environment)\"|keys')"
        required: true
        default: __auto__
        model: general.location

