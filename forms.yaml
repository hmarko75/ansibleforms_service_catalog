categories:
  - name: Default
    icon: bars
  - name: Dataset
    icon: bath
  - name: Create
    icon: bath  
  - name: Clone
    icon: bath             
roles:
  - name: admin
    groups:
      - local/admins
      - ldap/Domain Admins
  - name: operator
    groups:
      - local/operator
  - name: demo
    groups:
      - local/demo
  - name: public
    groups: []
  - name: Provision
    groups:
      - local/Provision Admins  
forms:
  - name: Create New Volume 
    help: |
      This is used to create new volume for a service  
    roles:
      - Provision
    description: New dataset creation 
    categories:
      - Dataset
      - Create
    #tileClass: has-background-link
    icon: scroll
    playbook: dataops_create_vol.yaml
    inventory: hosts
    type: ansible
    fields:   
      - type: expression
        hide: true
        label: globals
        name: globals
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','')"    
        noOutput: true

      - type: expression
        name: aiqum
        expression: "'aiqum.demo.netapp.com'" 
        label: aiqum
        asCredential: true
        hide: true 
        noOutput: true

      - type: query
        name: service
        label: Service
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','[.services[] | ({name} + {shortname}) ]')"
        columns:
        - name
        default: __auto__

      - type: expression
        hide: true
        label: company_jq
        name: company_jq
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','[(.services[] | select (.name==\"$(service.name)\")|.combinations)[]|{name:.company}]|unique')"          
        noOutput: true

      - type: query
        name: company
        label: Company
        expression: "JSON.parse('$(company_jq)')"
        columns:
        - name
        required: true
        runLocal: true
        default: __auto__

      - type: expression
        label: environment_jq
        name: environment_jq
        hide: true 
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','[(.services[] | select (.name==\"$(service.name)\")|.combinations)[]| select(.company==\"$(company.name)\")|{name: .environment}]|unique')"
        noOutput: true

      - type: query
        name: environment
        label: Environment
        expression: "JSON.parse('$(environment_jq)')"
        columns:
        - name
        required: true
        runLocal: true
        default: __auto__     

      - type: expression
        label: location_jq
        name: location_jq
        hide: true 
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','[(.services[] | select (.name==\"$(service.name)\")|.combinations)[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\")|{name: .location}]|unique')"
        noOutput: true

      - type: query
        name: location
        label: Location
        expression: "JSON.parse('$(location_jq.name)')"
        columns:
        - name
        required: true
        runLocal: true
        default: __auto__

      #checkbox to see cluster/aggregate/svm information 
      #- type: checkbox
      #  name: show_prod_details
      #  label: Show Details ?
      #  default: false          
      #  group: Production

      - type: text
        name: prodvolname
        label: Volume Name
        default: ""
        required: true
        minLength: 1
        maxLength: 30
        regex: ^[a-zA-Z0-9_]*$
        regexDescription: Invalid volume name
        icon: user
        group: Production
        model: prod.volname

      - type: number
        name: prodvolsize
        label: Volume Size (G)
        default: "100"
        required: true
        minValue: 10
        maxValue: 90000
        icon: user
        group: Production
        model: prod.size
      
      #will build a %7C (|) cluster list that will be used for rest aiqum aggr filter 
      - type: expression
        name: aggr_filter_jq 
        label: aggr_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','.services[] | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"production\")|.clusters[]|keys|join(\"%7C\")')"
        group: Production
        noOutput: true
      
      #will get aggreagte list including capacity and perf using cluster filter. sorted by by avaialble capacity 
      - type: expression
        name: cluster_aggr_jq 
        label: cluster_aggr_jq
        hide: true
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/aggregates?state=online&cluster.name=$(aggr_filter_jq)','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Resource: (.cluster.name+\" : \"+.name)}+{Aggregate: .name}+{Cluster: .cluster.name}+{Node: .node.name}+{Size: (.space.block_storage.size/1024/1024/1024)|round|gb}+{AvailRaw:.space.block_storage.available}+{Available: (.space.block_storage.available/1024/1024/1024)|round|gb}+{Perf: (((.performance_capacity.used*100)|roundit|tostring)+\"%\")}+{Type: .type}]','(a, b) => a.AvailRaw < b.AvailRaw && 1 || -1','')"
        group: Production
        noOutput: true

      #aggr enum 
      - type: query
        name: prod_cluster_aggr
        label: Cluster/Aggregate
        expression: "JSON.parse('$(cluster_aggr_jq)')"
        columns:
        - Resource
        - Node
        - Size
        - Available
        - Perf
        - Type
        required: true
        runLocal: true
        default: __auto__  
        group: Production
        outputObject: true
        model: prod.clusteraggr
        #dependencies:         
        #- name: show_prod_details
        #  values:
        #  - true        
      
      # will build a %7C (|) svm list that will be used for rest aiqum aggr filter 
      - type: expression
        name: svm_filter_jq
        label: svm_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','.services[] | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"production\")|.clusters[]|.$(prod_cluster_aggr.Cluster)|join(\"%7C\")')"
        group: Production
        noOutput: true

      #will get SVM list 
      - type: expression
        name: prodsvm_jq
        label: prodsvm_jq
        hide: true
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(prod_cluster_aggr.Cluster)&name=$(svm_filter_jq)','','AIQUM','[.records[]|{Name: .name}]','','')"
        group: Production
        noOutput: true

      - type: query
        name: prod_svm
        label: SVM
        expression: "JSON.parse('$(prodsvm_jq)')"
        columns:
        - Name
        required: true
        runLocal: true
        default: __auto__  
        group: Production
        model: prod.svm
        # dependencies:         
        # - name: show_prod_details
        #   values:
        #   - true
        
