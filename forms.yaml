categories:
  - name: Default
    icon: bars
  - name: Provision
    icon: bath  
  - name: Maintenance
    icon: bath             
roles:
  - name: admin
    groups:
      - local/admins
      - ldap/Domain Admins
  - name: operator
    groups:
      - local/operator
  - name: demo
    groups:
      - local/demo
  - name: public
    groups: []
  - name: Provision
    groups:
      - local/Provision Admins  
forms:

  - name: Create New Volume For Service
    help:
      This is used to create new volume for a service  
    roles:
      - Provision
    description: New volume creation
    categories:
      - Provision
    icon: scroll
    playbook: create_service_vol.yaml
    inventory: hosts
    type: ansible
    fields:
    
      ############################################################################################################################
      # environment General configuration
      ############################################################################################################################    

      - type: expression
        name: settings
        label: settings
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','')"
        noOutput: true 
        hide: true

      #aiqum server 
      - type: expression
        name: aiqum
        expression: "fn.fnJq($(settings),'.general.aiqum')" 
        label: aiqum
        hide: true 
        noOutput: true

      #ontap credentials to use in ansible 
      - type: expression         # readonly
        name: login
        expression: "'ONTAP'" 
        label: login
        asCredential: true
        hide: true    


      ############################################################################################################################
      # filter service, environment, company, location
      ############################################################################################################################

      - type: query
        name: service
        label: Service
        expression: "fn.fnJq($(settings),'.services[]|keys')"
        required: true
        default: __auto__
        model: general.service

      - type: query
        name: company
        label: Company
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|keys')"
        required: true
        default: __auto__
        model: general.company

      - type: query
        name: environment
        label: Environment
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|keys')"
        required: true
        default: __auto__     
        model: general.environment

      - type: query
        name: location
        label: Location
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|keys')"
        required: true
        default: __auto__
        model: general.location

      - type: text
        name: volname
        label: Volume Name
        default: ""
        required: true
        minLength: 1
        maxLength: 30
        regex: 
          expression: ^[a-z0-9_]*$
          description: Invalid volume name         
        notIn:
          field: "existingvols"
          description: Volume already exists           
        icon: user
        #group: Production
        model: prod.volname

      - type: number
        name: volsize
        label: Volume Size (G)
        default: "100"
        required: true
        minValue: 10
        maxValue: 90000
        icon: user
        model: prod.volsize

      - type: enum
        name: secstyle
        label: Security Style
        default: ntfs
        values:
        - ntfs
        - unix
        required: true  
        model: prod.secstyle

      - type: text
        name: exports
        label: Export Hosts
        default: ""
        required: false
        regex:
          expression: ([^,]+)
          description: Invalid volume name 
        model: prod.exports
        icon: user

      - type: number
        name: cr
        label: Change Request
        default: ""
        required: false
        minValue: 0
        maxValue: 9999999999
        icon: user
        noOutput: true

      - type: text
        name: application
        label: Application
        default: ""
        required: false
        minLength: 1
        maxLength: 30
        regex: 
          expression: ^[a-zA-Z0-9א-ת_-\s]*$
          description: Invalid input         
        noOutput: true
        icon: user

      - type: text
        name: usedfor
        label: Used For
        default: ""
        required: false
        minLength: 1
        maxLength: 30
        regex: 
          expression: ^[a-zA-Z0-9א-ת_-\s]*$
          description: Invalid input         
        noOutput: true
        icon: user

      - type: text
        name: unit
        label: Unit
        default: ""
        required: false
        minLength: 1
        maxLength: 30
        regex: 
          expression: ^[a-zA-Z0-9א-ת_-\s]*$
          description: Invalid input         
        noOutput: true
        icon: user        

      - type: text
        name: owner
        label: Owner
        default: ""
        required: false
        minLength: 1
        maxLength: 30
        regex: 
          expression: ^[a-zA-Z0-9א-ת_-\s]*$
          description: Invalid input         
        noOutput: true
        icon: user

      - type: text
        name: comment
        label: Comment
        default: ""
        required: false
        minLength: 1
        maxLength: 40
        regex: 
          expression: ^[a-zA-Z0-9א-ת_-\s]*$
          description: Invalid input         
        noOutput: true
        icon: user
      
      - type: expression
        name: volcomment 
        label: volcomment
        hide: true
        expression: "'CR:\"$(cr)\" APPLICATION:\"$(application)\" Used For:\"$(usedfor)\" UNIT:\"$(unit)\" OWNER:\"$(owner)\" COMMENT:\"$(comment)\"'"
        model: general.comment

        

      ############################################################################################################################
      # check which copies are needed 
      ############################################################################################################################
      #get the type of copies
      - type: expression
        name: copy_types_jq 
        label: copy_types_jq
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|keys')"
        noOutput: true

      #validate dr1 is required copy
      - type: expression
        name: dr1
        label: dr1
        hide: true
        runLocal: true
        expression: "$(copy_types_jq).includes('dr1')"
        noOutput: true

      #validate dr2 is required copy
      - type: expression
        name: dr2
        label: dr2
        hide: true
        runLocal: true
        expression: "$(copy_types_jq).includes('dr2')"
        noOutput: true

      #validate b2d1 is required copy
      - type: expression
        name: b2d1
        label: b2d1
        hide: true
        runLocal: true
        expression: "$(copy_types_jq).includes('b2d1')"
        noOutput: true        
      #validate b2d2 is required copy
      - type: expression
        name: b2d2
        label: b2d2
        hide: true
        runLocal: true
        expression: "$(copy_types_jq).includes('b2d2')"
        noOutput: true              

      ############################################################################################################################
      # create prod copy location information
      ############################################################################################################################      
      
      #will build a %7C (|) cluster list that will be used for rest aiqum aggr filter 
      - type: expression
        name: aggr_filter_jq 
        label: aggr_filter_jq
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.prod|.clusters[]|keys|join(\"%7C\")')"
        group: Production
        noOutput: true

      #aggr enum 
      - type: query
        name: cluster_aggr
        label: Cluster/Aggregate
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/aggregates?state=online&cluster.name=$(aggr_filter_jq)','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Resource: (.cluster.name+\" : \"+.name)}+{Aggregate: .name}+{Cluster: .cluster.name}+{Node: .node.name}+{Size: (.space.block_storage.size/1024/1024/1024)|round|gb}+{AvailRaw:.space.block_storage.available}+{Available: (.space.block_storage.available/1024/1024/1024)|round|gb}+{Perf: (((.performance_capacity.used*100)|roundit|tostring)+\"%\")}+{Type: .type}]','(a, b) => a.AvailRaw < b.AvailRaw && 1 || -1','')"
        columns:
        - Resource
        - Node
        - Size
        - Available
        - Perf
        - Type
        required: true
        default: __auto__  
        group: Production
        outputObject: true
        noOutput: true
      
      - type: expression       
        name: cluster
        label: cluster
        expression: "'$(cluster_aggr.Cluster)'"
        hide: true
        group: Production
        model: prod.cluster

      - type: expression       
        name: aggregate
        label: aggregate
        expression: "'$(cluster_aggr.Aggregate)'"
        hide: true
        group: Production
        model: prod.aggregate       
      
      # will build a %7C (|) svm list that will be used for rest aiqum aggr filter 
      - type: expression
        name: svm_filter_jq
        label: svm_filter_jq
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.prod|.clusters[]|.$(cluster)|join(\"%7C\")')"
        group: Production
        noOutput: true

      - type: query
        name: svm
        label: SVM
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(cluster)&name=$(svm_filter_jq)','','AIQUM','[.records[]|{Name: .name}]','','')"
        columns:
        - Name
        required: true
        default: __auto__  
        group: Production
        model: prod.svm

      - type: expression
        name: existingvols
        label: existingvols
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/volumes?cluster.name=$(cluster)&svm.name=$(svm)&max_records=1000','','AIQUM','[.records[]|.name]','','')"
        hide: true
        group: Production
        noOutput: true

      #prod snapshot policy 
      - type: expression
        name: snapshotpolicy
        label: snapshotpolicy
        hide: true        
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.prod|.snapshotpolicy')"
        group: Production
        model: prod.snapshotpolicy

      #prod efficiency configuration
      - type: expression
        name: efficiency
        label: efficiency
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.prod|.efficiency')"
        group: Production
        model: prod.efficiency            

      #prod cifs access
      - type: expression
        name: cifsaccess
        label: cifsaccess
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.prod|.cifsaccess')"
        model: prod.cifsaccess      
       
      ############################################################################################################################
      # create dr1 copy if required
      ############################################################################################################################      

      #dr1 name suffix if provided 
      - type: expression
        name: dr1_volnamesuffix
        label: dr1_volnamesuffix
        hide: true        
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.dr1|.volnamesuffix')"
        group: DR1
        noOutput: true
        dependencies:         
        - name: dr1
          values:
          - true 

      #dr1 vol name
      - type: expression
        name: dr1_volname
        label: Volume Name
        hide: true
        expression: "'$(volname)'+'$(dr1_volnamesuffix)'"
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true  
        model: dr1.volname

      #dr1 size ratio
      - type: expression
        name: dr1_sizeratio
        label: dr1_sizeratio
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.dr1|.sizeratio')"
        group: DR1
        noOutput: true
        dependencies:         
        - name: dr1
          values:
          - true 

      #vol size will be production vol size multiplied by size ratio
      - type: expression
        name: dr1_volsize
        label: Volume Size
        hide: true
        runLocal: true
        expression: "($(volsize)*$(dr1_sizeratio)).toString()"
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true  
        model: dr1.volsize

      #dedicated cluster 
      - type: expression
        name: dr1_dedicated_cluster 
        label: dr1_dedicated_cluster
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.dr1|.fixed_relationship_for_prod|.$(cluster)_$(svm)|.cluster')"
        group: DR1
        noOutput: true
        dependencies:         
        - name: dr1
          values:
          - true   

      #dedicated svm 
      - type: expression
        name: dr1_dedicated_svm 
        label: dr1_dedicated_svm
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.dr1|.fixed_relationship_for_prod|.$(cluster)_$(svm)|.svm')"
        group: DR1
        noOutput: true
        dependencies:         
        - name: dr1
          values:
          - true             

      #will build a %7C (|) cluster list that will be used for rest aiqum aggr filter for dedicated cluster
      - type: expression
        name: dr1_aggr_filter_jq
        label: dr1_aggr_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','if \"$(dr1_dedicated_cluster)\" != \"null\" then \"$(dr1_dedicated_cluster)\" else .services[] | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"dr1\")|.clusters[]|keys|join(\"%7C\") end')"
        group: DR1
        noOutput: true
        dependencies:         
        - name: dr1
          values:
          - true 

      #aggr enum 
      - type: query
        name: dr1_cluster_aggr
        label: Cluster/Aggregate
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/aggregates?state=online&cluster.name=$(dr1_aggr_filter_jq)','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Resource: (.cluster.name+\" : \"+.name)}+{Aggregate: .name}+{Cluster: .cluster.name}+{Node: .node.name}+{Size: (.space.block_storage.size/1024/1024/1024)|round|gb}+{AvailRaw:.space.block_storage.available}+{Available: (.space.block_storage.available/1024/1024/1024)|round|gb}+{Perf: (((.performance_capacity.used*100)|roundit|tostring)+\"%\")}+{Type: .type}]','(a, b) => a.AvailRaw < b.AvailRaw && 1 || -1','')"
        columns:
        - Resource
        - Node
        - Size
        - Available
        - Perf
        - Type
        noOutput: true
        default: __auto__
        required: true
        group: DR1
        outputObject: true
        dependencies:         
        - name: dr1
          values:
          - true          
      
      - type: expression       
        name: dr1_cluster
        label: dr1_cluster
        expression: "'$(dr1_cluster_aggr.Cluster)'"
        hide: true
        group: DR1
        model: dr1.cluster
        dependencies:         
        - name: dr1
          values:
          - true          

      - type: expression       
        name: dr1_aggregate
        label: dr1_aggregate
        expression: "'$(dr1_cluster_aggr.Aggregate)'"
        hide: true
        group: DR1
        model: dr1.aggregate
        dependencies:         
        - name: dr1
          values:
          - true              
      
      # will build a %7C (|) svm list that will be used for rest aiqum aggr filter 
      - type: expression
        name: dr1_svm_filter_jq
        label: dr1_svm_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','if \"$(dr1_dedicated_svm)\" != \"null\" then \"$(dr1_dedicated_svm)\" else .services[] | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"dr1\")|.clusters[]|.$(dr1_cluster)|join(\"%7C\") end')"
        group: DR1
        noOutput: true
        dependencies:         
        - name: dr1
          values:
          - true                 

      - type: query
        name: dr1_svm
        label: SVM
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(dr1_cluster_aggr.Cluster)&name=$(dr1_svm_filter_jq)','','AIQUM','[.records[]|{Name: .name}]','','')"
        columns:
        - Name
        required: true
        default: __auto__  
        group: DR1
        model: dr1.svm
        dependencies:         
        - name: dr1
          values:
          - true  

      #dr1 source
      - type: expression
        name: dr1_source
        label: dr1_source
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.dr1|.source')"
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true
        model: dr1.source

        
      ############################################################################################################################
      # create dr2 copy if required
      ############################################################################################################################      

      #dr2 name suffix if provided 
      - type: expression
        name: dr2_volnamesuffix
        label: dr2_volnamesuffix
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.dr2|.volnamesuffix')"
        group: DR2
        noOutput: true
        dependencies:         
        - name: dr2
          values:
          - true 

      #dr2 vol name
      - type: expression
        name: dr2_volname
        label: Volume Name
        hide: true
        expression: "'$(volname)'+'$(dr2_volnamesuffix)'"
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true  
        model: dr2.volname

      #dr2 size ratio
      - type: expression
        name: dr2_sizeratio
        label: dr2_sizeratio
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.dr2|.sizeratio')"
        group: DR2
        noOutput: true
        dependencies:         
        - name: dr2
          values:
          - true 

      #vol size will be production vol size multiplied by size ratio
      - type: expression
        name: dr2_volsize
        label: Volume Size
        hide: true
        runLocal: true
        expression: "($(volsize)*$(dr2_sizeratio)).toString()"
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true  
        model: dr2.volsize

      #dedicated cluster 
      - type: expression
        name: dr2_dedicated_cluster 
        label: dr2_dedicated_cluster
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.dr2|.fixed_relationship_for_prod|.$(cluster)_$(svm)|.cluster')"
        group: DR2
        noOutput: true
        dependencies:         
        - name: dr2
          values:
          - true   

      #dedicated svm 
      - type: expression
        name: dr2_dedicated_svm 
        label: dr2_dedicated_svm
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.dr2|.fixed_relationship_for_prod|.$(cluster)_$(svm)|.svm')"
        group: DR2
        noOutput: true
        dependencies:         
        - name: dr2
          values:
          - true          

      #will build a %7C (|) cluster list that will be used for rest aiqum aggr filter 
      - type: expression
        name: dr2_aggr_filter_jq 
        label: dr2_aggr_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','if \"$(dr2_dedicated_cluster)\" != \"null\" then \"$(dr2_dedicated_cluster)\" else .services[] | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"dr2\")|.clusters[]|keys|join(\"%7C\") end')"
        group: DR2
        noOutput: true
        dependencies:         
        - name: dr2
          values:
          - true                

      #aggr enum 
      - type: query
        name: dr2_cluster_aggr
        label: Cluster/Aggregate
        # expression: "JSON.parse('$(dr2_cluster_aggr_jq)')"
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/aggregates?state=online&cluster.name=$(dr2_aggr_filter_jq)','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Resource: (.cluster.name+\" : \"+.name)}+{Aggregate: .name}+{Cluster: .cluster.name}+{Node: .node.name}+{Size: (.space.block_storage.size/1024/1024/1024)|round|gb}+{AvailRaw:.space.block_storage.available}+{Available: (.space.block_storage.available/1024/1024/1024)|round|gb}+{Perf: (((.performance_capacity.used*100)|roundit|tostring)+\"%\")}+{Type: .type}]','(a, b) => a.AvailRaw < b.AvailRaw && 1 || -1','')"
        columns:
        - Resource
        - Node
        - Size
        - Available
        - Perf
        - Type
        noOutput: true
        default: __auto__
        required: true
        group: DR2
        outputObject: true
        dependencies:         
        - name: dr2
          values:
          - true          
      
      - type: expression       
        name: dr2_cluster
        label: dr2_cluster
        expression: "'$(dr2_cluster_aggr.Cluster)'"
        hide: true
        group: DR2
        model: dr2.cluster
        dependencies:         
        - name: dr2
          values:
          - true          

      - type: expression       
        name: dr2_aggregate
        label: dr2_aggregate
        expression: "'$(dr2_cluster_aggr.Aggregate)'"
        hide: true
        group: DR2
        model: dr2.aggregate
        dependencies:         
        - name: dr2
          values:
          - true              
      
      # will build a %7C (|) svm list that will be used for rest aiqum aggr filter 
      - type: expression
        name: dr2_svm_filter_jq
        label: dr2_svm_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','if \"$(dr2_dedicated_svm)\" != \"null\" then \"$(dr2_dedicated_svm)\" else .services[] | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"dr2\")|.clusters[]|.$(dr2_cluster)|join(\"%7C\") end')"
        group: DR2
        noOutput: true
        dependencies:         
        - name: dr2
          values:
          - true               

      - type: query
        name: dr2_svm
        label: SVM
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(dr2_cluster)&name=$(dr2_svm_filter_jq)','','AIQUM','[.records[]|{Name: .name}]','','')"
        columns:
        - Name
        required: true
        default: __auto__  
        group: DR2
        model: dr2.svm
        dependencies:         
        - name: dr2
          values:
          - true  

      #dr2 source
      - type: expression
        name: dr2_source
        label: dr2_source
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.dr2|.source')"
        group: DR2
        dependencies:         
        - name: dr2
          values:
          - true
        model: dr2.source

      ############################################################################################################################
      # create b2d1 copy if required
      ############################################################################################################################      

      #b2d1 name suffix if provided 
      - type: expression
        name: b2d1_volnamesuffix
        label: b2d1_volnamesuffix
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.b2d1|.volnamesuffix')"
        group: B2D1
        noOutput: true
        dependencies:         
        - name: b2d1
          values:
          - true 

      #b2d1 vol name
      - type: expression
        name: b2d1_volname
        label: Volume Name
        hide: true
        expression: "'$(volname)'+'$(b2d1_volnamesuffix)'"
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true  
        model: b2d1.volname

      #b2d1 size ratio
      - type: expression
        name: b2d1_sizeratio
        label: b2d1_sizeratio
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.b2d1|.sizeratio')"
        group: B2D1
        noOutput: true
        dependencies:         
        - name: b2d1
          values:
          - true 

      #vol size will be production vol size multiplied by size ratio
      - type: expression
        name: b2d1_volsize
        label: Volume Size
        hide: true
        runLocal: true
        expression: "($(volsize)*$(b2d1_sizeratio)).toString()"
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true  
        model: b2d1.volsize

      #dedicated cluster 
      - type: expression
        name: b2d1_dedicated_cluster 
        label: b2d1_dedicated_cluster
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.b2d1|.fixed_relationship_for_prod|.$(cluster)_$(svm)|.cluster')"
        group: B2D1
        noOutput: true
        dependencies:         
        - name: b2d1
          values:
          - true   

      #dedicated svm 
      - type: expression
        name: b2d1_dedicated_svm 
        label: b2d1_dedicated_svm
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.b2d1|.fixed_relationship_for_prod|.$(cluster)_$(svm)|.svm')"
        group: B2D1
        noOutput: true
        dependencies:         
        - name: b2d1
          values:
          - true 

      #will build a %7C (|) cluster list that will be used for rest aiqum aggr filter 
      - type: expression
        name: b2d1_aggr_filter_jq 
        label: b2d1_aggr_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','if \"$(b2d1_dedicated_cluster)\" != \"null\" then \"$(b2d1_dedicated_cluster)\" else .services[] | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"b2d1\")|.clusters[]|keys|join(\"%7C\") end')"
        group: B2D1
        noOutput: true
        dependencies:         
        - name: b2d1
          values:
          - true              

      #aggr enum 
      - type: query
        name: b2d1_cluster_aggr
        label: Cluster/Aggregate
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/aggregates?state=online&cluster.name=$(b2d1_aggr_filter_jq)','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Resource: (.cluster.name+\" : \"+.name)}+{Aggregate: .name}+{Cluster: .cluster.name}+{Node: .node.name}+{Size: (.space.block_storage.size/1024/1024/1024)|round|gb}+{AvailRaw:.space.block_storage.available}+{Available: (.space.block_storage.available/1024/1024/1024)|round|gb}+{Perf: (((.performance_capacity.used*100)|roundit|tostring)+\"%\")}+{Type: .type}]','(a, b) => a.AvailRaw < b.AvailRaw && 1 || -1','')"
        columns:
        - Resource
        - Node
        - Size
        - Available
        - Perf
        - Type
        noOutput: true
        default: __auto__
        required: true
        group: B2D1
        outputObject: true
        dependencies:         
        - name: b2d1
          values:
          - true          
      
      - type: expression       
        name: b2d1_cluster
        label: b2d1_cluster
        expression: "'$(b2d1_cluster_aggr.Cluster)'"
        hide: true
        group: B2D1
        model: b2d1.cluster
        dependencies:         
        - name: b2d1
          values:
          - true          

      - type: expression       
        name: b2d1_aggregate
        label: b2d1_aggregate
        expression: "'$(b2d1_cluster_aggr.Aggregate)'"
        hide: true
        group: B2D1
        model: b2d1.aggregate
        dependencies:         
        - name: b2d1
          values:
          - true              
      
      # will build a %7C (|) svm list that will be used for rest aiqum aggr filter 
      - type: expression
        name: b2d1_svm_filter_jq
        label: b2d1_svm_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','if \"$(b2d1_dedicated_svm)\" != \"null\" then \"$(b2d1_dedicated_svm)\" else .services[] | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"b2d1\")|.clusters[]|.$(b2d1_cluster)|join(\"%7C\") end')"
        group: B2D1
        noOutput: true
        dependencies:         
        - name: b2d1
          values:
          - true               

      - type: query
        name: b2d1_svm
        label: SVM
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(b2d1_cluster)&name=$(b2d1_svm_filter_jq)','','AIQUM','[.records[]|{Name: .name}]','','')"
        columns:
        - Name
        required: true
        default: __auto__  
        group: B2D1
        model: b2d1.svm
        dependencies:         
        - name: b2d1
          values:
          - true  

      #B2D1 source
      - type: expression
        name: b2d1_source
        label: b2d1_source
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.b2d1|.source')"
        group: B2D1
        dependencies:         
        - name: b2d1
          values:
          - true
        model: b2d1.source  

      ############################################################################################################################
      # create b2d2 copy if required
      ############################################################################################################################      

      #b2d2 name suffix if provided 
      - type: expression
        name: b2d2_volnamesuffix
        label: b2d2_volnamesuffix
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.b2d2|.volnamesuffix')"
        group: B2D2
        noOutput: true
        dependencies:         
        - name: b2d2
          values:
          - true 

      #b2d2 vol name
      - type: expression
        name: b2d2_volname
        label: Volume Name
        hide: true
        expression: "'$(volname)'+'$(b2d2_volnamesuffix)'"
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true  
        model: b2d2.volname

      #b2d2 size ratio
      - type: expression
        name: b2d2_sizeratio
        label: b2d2_sizeratio
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.b2d2|.sizeratio')"
        group: B2D2
        noOutput: true
        dependencies:         
        - name: b2d2
          values:
          - true 

      #vol size will be production vol size multiplied by size ratio
      - type: expression
        name: b2d2_volsize
        label: Volume Size
        hide: true
        runLocal: true
        expression: "($(volsize)*$(b2d2_sizeratio)).toString()"
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true  
        model: b2d2.volsize

      #dedicated cluster 
      - type: expression
        name: b2d2_dedicated_cluster 
        label: b2d2_dedicated_cluster
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.b2d2|.fixed_relationship_for_prod|.$(cluster)_$(svm)|.cluster')"
        group: B2D2
        noOutput: true
        dependencies:         
        - name: b2d2
          values:
          - true   

      #dedicated svm 
      - type: expression
        name: b2d2_dedicated_svm 
        label: b2d2_dedicated_svm
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.b2d2|.fixed_relationship_for_prod|.$(cluster)_$(svm)|.svm')"
        group: B2D2
        noOutput: true
        dependencies:         
        - name: b2d2
          values:
          - true          

      #will build a %7C (|) cluster list that will be used for rest aiqum aggr filter 
      - type: expression
        name: b2d2_aggr_filter_jq 
        label: b2d2_aggr_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','if \"$(b2d2_dedicated_cluster)\" != \"null\" then \"$(b2d2_dedicated_cluster)\" else .services[] | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"b2d2\")|.clusters[]|keys|join(\"%7C\") end')"
        group: B2D2
        noOutput: true
        dependencies:         
        - name: b2d2
          values:
          - true                  

      #aggr enum 
      - type: query
        name: b2d2_cluster_aggr
        label: Cluster/Aggregate
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/storage/aggregates?state=online&cluster.name=$(b2d2_aggr_filter_jq)','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Resource: (.cluster.name+\" : \"+.name)}+{Aggregate: .name}+{Cluster: .cluster.name}+{Node: .node.name}+{Size: (.space.block_storage.size/1024/1024/1024)|round|gb}+{AvailRaw:.space.block_storage.available}+{Available: (.space.block_storage.available/1024/1024/1024)|round|gb}+{Perf: (((.performance_capacity.used*100)|roundit|tostring)+\"%\")}+{Type: .type}]','(a, b) => a.AvailRaw < b.AvailRaw && 1 || -1','')"
        columns:
        - Resource
        - Node
        - Size
        - Available
        - Perf
        - Type
        noOutput: true
        default: __auto__
        required: true
        group: B2D2
        outputObject: true
        dependencies:         
        - name: b2d2
          values:
          - true          
      
      - type: expression       
        name: b2d2_cluster
        label: b2d2_cluster
        expression: "'$(b2d2_cluster_aggr.Cluster)'"
        hide: true
        group: B2D2
        model: b2d2.cluster
        dependencies:         
        - name: b2d2
          values:
          - true          

      - type: expression       
        name: b2d2_aggregate
        label: b2d2_aggregate
        expression: "'$(b2d2_cluster_aggr.Aggregate)'"
        hide: true
        group: B2D2
        model: b2d2.aggregate
        dependencies:         
        - name: b2d2
          values:
          - true              
      
      # will build a %7C (|) svm list that will be used for rest aiqum aggr filter 
      - type: expression
        name: b2d2_svm_filter_jq
        label: b2d2_svm_filter_jq
        hide: true
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','if \"$(b2d2_dedicated_svm)\" != \"null\" then \"$(b2d2_dedicated_svm)\" else .services[] | select (.name==\"$(service.name)\")|.combinations[]| select(.company==\"$(company.name)\" and .environment==\"$(environment.name)\" and .location==\"$(location.name)\")|.copies[]|select(.type==\"b2d2\")|.clusters[]|.$(b2d2_cluster)|join(\"%7C\") end')"
        group: B2D2
        noOutput: true
        dependencies:         
        - name: b2d2
          values:
          - true             

      - type: query
        name: b2d2_svm
        label: SVM
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(b2d2_cluster)&name=$(b2d2_svm_filter_jq)','','AIQUM','[.records[]|{Name: .name}]','','')"
        columns:
        - Name
        required: true
        default: __auto__  
        group: B2D2
        model: b2d2.svm
        dependencies:         
        - name: b2d2
          values:
          - true  

      #B2D2 source
      - type: expression
        name: b2d2_source
        label: b2d2_source
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.b2d2|.source')"
        group: B2D2
        dependencies:         
        - name: b2d2
          values:
          - true
        model: b2d2.source         
      
  - name: Cleanup Ansibleforms Jobs
    showHelp: true
    help: |
      This form starts the `ansibleforms_job_cleanup.yaml` playbook
      It will remove all ansible job logs
    roles:
      - admin
    description: This will cleanup all ansible job logs.
    icon: trash
    categories:
      - Maintenance
    tileClass: has-background-danger-light
    playbook: ansibleforms_job_cleanup.yaml
    type: ansible
    fields:
      - type: expression
        name: mysql_credential
        expression: "'__self__'"
        label: Credential to connect to database
        asCredential: true
        required: true
        hide: true
      - type: checkbox
        name: areyousure
        label: Confirmation
        default: false
        placeholder: Are you sure you want to cleanup
      - type: text
        name: confirmation
        label: Please type YES to confirm you want to cleanup
        placeholder: YES
        required: true
        regex:
          expression: ^YES$
          description: Type YES to confirm
        dependencies:
          - name: areyousure
            values:
              - true

  - name: Create SVMs For Service
    help:
      This is used to create the required SVMs for a service  
    roles:
      - Provision
    description: New Service SVMs creation
    categories:
      - Provision
    icon: scroll
    playbook: create_service_svm.yaml
    inventory: hosts
    type: ansible
    fields:        

      ############################################################################################################################
      # environment General configuration
      ############################################################################################################################    

      - type: expression
        name: settings
        label: settings
        expression: "fn.fnReadYamlFile('/app/dist/persistent/globals.yaml','')"
        noOutput: true 
        hide: true

      #aiqum server 
      - type: expression
        name: aiqum
        expression: "fn.fnJq($(settings),'.general.aiqum')" 
        label: aiqum
        hide: true 
        noOutput: true

      #ontap credentials to use in ansible 
      - type: expression         # readonly
        name: login
        expression: "'ONTAP'" 
        label: login
        asCredential: true
        hide: true   

      ############################################################################################################################
      # filter service, environment, company, location
      ############################################################################################################################

      - type: query
        name: service
        label: Service
        expression: "fn.fnJq($(settings),'.services[]|keys')"
        required: true
        default: __auto__
        model: general.service

      - type: query
        name: company
        label: Company
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|keys')"
        required: true
        default: __auto__
        model: general.company

      - type: query
        name: environment
        label: Environment
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|keys')"
        required: true
        default: __auto__     
        model: general.environment

      - type: query
        name: location
        label: Location
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|keys')"
        required: true
        default: __auto__
        model: general.location

      ############################################################################################################################
      # check which copies are needed 
      ############################################################################################################################
      #get the type of copies
      - type: expression
        name: copy_types_jq 
        label: copy_types_jq
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|keys')"
        noOutput: true

      #validate dr1 is required copy
      - type: expression
        name: dr1
        label: dr1
        hide: true
        runLocal: true
        expression: "$(copy_types_jq).includes('dr1')"
        noOutput: true

      #validate dr2 is required copy
      - type: expression
        name: dr2
        label: dr2
        hide: true
        runLocal: true
        expression: "$(copy_types_jq).includes('dr2')"
        noOutput: true

      #validate b2d1 is required copy
      - type: expression
        name: b2d1
        label: b2d1
        hide: true
        runLocal: true
        expression: "$(copy_types_jq).includes('b2d1')"
        noOutput: true

      #validate b2d2 is required copy
      - type: expression
        name: b2d2
        label: b2d2
        hide: true
        runLocal: true
        expression: "$(copy_types_jq).includes('b2d2')"
        noOutput: true              

      ############################################################################################################################
      # create prod copy location information
      ############################################################################################################################      

      #cluster enum 
      - type: query
        name: cluster_list
        label: Clusters
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/cluster/clusters','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Name:.name}+{Version:((.version.generation|tostring)+\".\"+(.version.major|tostring)+\".\"+(.version.minor|tostring))}+{Location: .location}+{Contact:.contact}+{\"Total Capacity\":(.storage_capacity.total/1024/1024/1024)|round|gb}+{\"Available Capacity\":(.storage_capacity.available/1024/1024/1024)|round|gb}+{AvailRaw:.storage_capacity.available}]','(a, b) => a.AvailRaw < b.AvailRaw && 1 || -1','')"
        columns:
        - Name
        - Version
        - Location
        - Contact
        - "Total Capacity"
        - "Available Capacity"
        required: true
        default: __auto__  
        group: Production
        outputObject: false
        noOutput: false
        model: prod.cluster
      
      # - type: expression       
      #   name: cluster
      #   label: cluster
      #   expression: "'$(cluster_list.Name)'"
      #   hide: true
      #   group: Production
      #   model: prod.cluster

      - type: expression
        name: existingsvms
        label: existingsvms
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(cluster)&max_records=1000','','AIQUM','[.records[]|.name]','','')"
        hide: true
        group: Production
        noOutput: true        

      - type: text
        name: svm
        label: SVM Name
        default: ""
        required: true
        minLength: 1
        maxLength: 30
        regex: 
          expression: ^[a-z0-9_]*$
          description: Invalid SVM Name         
        notIn:
          field: "existingsvms"
          description: SVM already exists           
        icon: user
        group: Production
        model: prod.svm

      ############################################################################################################################
      # create dr1 svm if required
      ############################################################################################################################      

      #dr1 svm suffix
      - type: expression
        name: dr1_svmsuffix
        label: dr1_svmsuffix
        hide: true
        expression: "fn.fnJq($(settings),'.services[]|.\"$(service)\"[]|.\"$(company)\"[]|.\"$(environment)\"[]|.\"$(location)\"[]|.dr1|.svmnamesuffix')"
        group: DR1
        noOutput: true
        dependencies:         
        - name: dr1
          values:
          - true 
                           
      #cluster enum 
      - type: query
        name: dr1_cluster
        label: Clusters
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/cluster/clusters','','AIQUM','def gb:tostring|[while(length>0;.[:-3])|.[-3:]]|reverse|join(\",\")+\"GB\";def roundit: .*100.0 + 0.5|floor/100.0;[.records[]|{Name:.name}+{Version:((.version.generation|tostring)+\".\"+(.version.major|tostring)+\".\"+(.version.minor|tostring))}+{Location: .location}+{Contact:.contact}+{\"Total Capacity\":(.storage_capacity.total/1024/1024/1024)|round|gb}+{\"Available Capacity\":(.storage_capacity.available/1024/1024/1024)|round|gb}+{AvailRaw:.storage_capacity.available}]','(a, b) => a.AvailRaw < b.AvailRaw && 1 || -1','')"
        columns:
        - Name
        - Version
        - Location
        - Contact
        - "Total Capacity"
        - "Available Capacity"
        default: __auto__
        group: DR1
        noOutput: false
        dependencies:         
        - name: dr1
          values:
          - true 
        model: dr1.cluster 
      
      # #cluster name
      # - type: expression       
      #   name: dr1_cluster
      #   label: dr1_cluster
      #   expression: "'$(dr1_cluster_list.Name)'"
      #   hide: true
      #   group: DR1
      #   model: dr1.cluster
      #   dependencies:         
      #   - name: dr1
      #     values:
      #     - true        

      #dr1 svm suffix
      - type: expression
        name: dr1_svm_standard
        label: SVM Name
        hide: false
        runLocal: true
        expression: "'$(dr1_svmsuffix)'=='null' || '$(dr1_svmsuffix)'=='' ? '$(svm)'+'_dr1' : '$(svm)'+'$(dr1_svmsuffix)'"
        group: DR1
        model: dr1.svm_standard
        dependencies:         
        - name: dr1
          values:
          - true 
        - name: dr1_override
          values:
          - false           

      #override standard name 
      - type: checkbox
        name: dr1_override 
        label: Override default SVM Name
        default: false
        group: DR1
        noOutput: true        
        dependencies:         
        - name: dr1
          values:
          - true         

      # current svms
      - type: expression
        name: dr1_existingsvms
        label: dr1_existingsvms
        #expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(dr1_cluster)&max_records=1000','','AIQUM','[.records[]|.name]|if \"$(dr1_cluster)\"==\"$(cluster)\" then (. +=[\"$(svm)\"]) else (.) end','','')"
        expression: "fn.fnRestBasic('get','https://'+'$(aiqum)'+'/api/datacenter/svm/svms?cluster.name=$(dr1_cluster)&max_records=1000','','AIQUM','[.records[]|.name]|. +=[\"$(svm)\"]','','')"
        hide: true
        group: DR1
        noOutput: true
        dependencies:         
        - name: dr1
          values:
          - true    
        - name: dr1_override
          values:
          - true        

      #custom svm name
      - type: text
        name: dr1_svm_custom
        label: SVM Name
        default: ""
        required: true
        minLength: 1
        maxLength: 30
        model: dr1.svm_custom
        #noOutput: true
        regex: 
          expression: ^[a-z0-9_]*$
          description: Invalid SVM Name         
        notIn:
          field: "dr1_existingsvms"
          description: SVM already exists or duplicate    
        icon: user
        group: DR1
        dependencies:         
        - name: dr1
          values:
          - true 
        - name: dr1_override
          values:
          - true           
        
        
